{"ast":null,"code":"import moment from \"moment\";\nimport axios from \"axios\";\n\nclass TokenServices {\n  constructor() {\n    this.accessTokenLifetime = 1800;\n    this.refreshTokenLifetime = 31536000;\n\n    this.accessTokenLeftTime = () => this._secondsToUpdate(\"accessToken\");\n\n    this.refreshTokenLeftTime = () => this._secondsToUpdate(\"refreshToken\");\n\n    this.checkAndUpdateToken = async () => {\n      if (this._needRefreshAccessToken()) {\n        const token = await this._getNewAccessToken();\n\n        if (token) {\n          this.saveAccessToken(token !== null && token !== void 0 ? token : \"\");\n        }\n      }\n\n      return !this._needRefreshRefreshToken();\n    };\n\n    this.generateNewTokens = async id => {\n      const responce = await axios.post(`${process.env.REACT_APP_SERVER_URL}/api/generate-token`, {\n        id: id\n      });\n\n      if (!responce.data.success) {\n        console.log(\"!success\");\n        return;\n      }\n\n      const accessToken = responce.data.tokens.access;\n      const refreshToken = responce.data.tokens.refresh;\n      this.saveAccessToken(accessToken);\n      this.saveRefreshToken(refreshToken);\n    };\n\n    this.removeTokens = () => {\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"refreshTokenSetDate\");\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"accessTokenSetDate\");\n    };\n\n    this._getAccessToken = () => localStorage.getItem(\"accessToken\");\n\n    this._getRefreshToken = () => localStorage.getItem(\"refreshToken\");\n\n    this._getNewAccessToken = async () => {\n      if (this._needRefreshRefreshToken()) {\n        return null;\n      }\n\n      const refreshToken = this._getRefreshToken();\n\n      if (!refreshToken) return null;\n      const responce = await axios.post(\"http://localhost:5000/api/token\", {\n        token: refreshToken\n      });\n      if (!responce.data.success || !responce.data.token) return null;\n      return responce.data.token;\n    };\n  }\n\n  saveAccessToken(token) {\n    localStorage.setItem(\"accessToken\", token);\n    const now = moment();\n    localStorage.setItem(\"accessTokenSetDate\", now.toISOString());\n  }\n\n  saveRefreshToken(token) {\n    localStorage.setItem(\"refreshToken\", token);\n    const now = moment();\n    localStorage.setItem(\"refreshTokenSetDate\", now.toISOString());\n  }\n\n  isLogin() {\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    if (accessToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Core\n  _needRefreshAccessToken() {\n    const leftToLive = this._secondsToUpdate(\"accessToken\");\n\n    return leftToLive != null ? leftToLive >= this.accessTokenLifetime : null;\n  }\n\n  _needRefreshRefreshToken() {\n    const leftToLive = this._secondsToUpdate(\"refreshTokenSetDate\");\n\n    return leftToLive != null ? leftToLive <= 0 : null;\n  }\n\n  _secondsToUpdate(tokenKey) {\n    const setDate = localStorage.getItem(tokenKey);\n    if (!setDate) return null;\n    const date = moment(setDate);\n    const now = moment();\n    const diff = moment.duration(now.diff(date));\n    return Math.abs(diff.asSeconds());\n  }\n\n}\n\nexport default new TokenServices();","map":{"version":3,"sources":["C:/react/medicine-consultation/client/src/services/token-services.ts"],"names":["moment","axios","TokenServices","accessTokenLifetime","refreshTokenLifetime","accessTokenLeftTime","_secondsToUpdate","refreshTokenLeftTime","checkAndUpdateToken","_needRefreshAccessToken","token","_getNewAccessToken","saveAccessToken","_needRefreshRefreshToken","generateNewTokens","id","responce","post","process","env","REACT_APP_SERVER_URL","data","success","console","log","accessToken","tokens","access","refreshToken","refresh","saveRefreshToken","removeTokens","localStorage","removeItem","_getAccessToken","getItem","_getRefreshToken","setItem","now","toISOString","isLogin","leftToLive","tokenKey","setDate","date","diff","duration","Math","abs","asSeconds"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAN,CAAoB;AAAA;AAAA,SAEhBC,mBAFgB,GAEc,IAFd;AAAA,SAGhBC,oBAHgB,GAGe,QAHf;;AAAA,SAMhBC,mBANgB,GAMM,MAAM,KAAKC,gBAAL,CAAsB,aAAtB,CANZ;;AAAA,SAOhBC,oBAPgB,GAOO,MAAM,KAAKD,gBAAL,CAAsB,cAAtB,CAPb;;AAAA,SAiChBE,mBAjCgB,GAiCM,YAAqC;AACvD,UAAI,KAAKC,uBAAL,EAAJ,EAAoC;AAChC,cAAMC,KAAK,GAAG,MAAM,KAAKC,kBAAL,EAApB;;AAEA,YAAID,KAAJ,EAAW;AACP,eAAKE,eAAL,CAAqBF,KAArB,aAAqBA,KAArB,cAAqBA,KAArB,GAA8B,EAA9B;AACH;AACJ;;AAED,aAAO,CAAC,KAAKG,wBAAL,EAAR;AACH,KA3Ce;;AAAA,SA6ChBC,iBA7CgB,GA6CI,MAAOC,EAAP,IAAqC;AACrD,YAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,qBADjB,EAEnB;AAAEL,QAAAA,EAAE,EAAEA;AAAN,OAFmB,CAAvB;;AAKA,UAAI,CAACC,QAAQ,CAACK,IAAT,CAAcC,OAAnB,EAA4B;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA;AACH;;AAED,YAAMC,WAAW,GAAGT,QAAQ,CAACK,IAAT,CAAcK,MAAd,CAAqBC,MAAzC;AACA,YAAMC,YAAY,GAAGZ,QAAQ,CAACK,IAAT,CAAcK,MAAd,CAAqBG,OAA1C;AAEA,WAAKjB,eAAL,CAAqBa,WAArB;AACA,WAAKK,gBAAL,CAAsBF,YAAtB;AACH,KA9De;;AAAA,SAgEhBG,YAhEgB,GAgED,MAAM;AACjBC,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,qBAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,oBAAxB;AACH,KArEe;;AAAA,SAqFRC,eArFQ,GAqFU,MACtBF,YAAY,CAACG,OAAb,CAAqB,aAArB,CAtFY;;AAAA,SAuFRC,gBAvFQ,GAuFW,MACvBJ,YAAY,CAACG,OAAb,CAAqB,cAArB,CAxFY;;AAAA,SAsGRxB,kBAtGQ,GAsGa,YAAoC;AAC7D,UAAI,KAAKE,wBAAL,EAAJ,EAAqC;AACjC,eAAO,IAAP;AACH;;AAED,YAAMe,YAAY,GAAG,KAAKQ,gBAAL,EAArB;;AAEA,UAAI,CAACR,YAAL,EAAmB,OAAO,IAAP;AAEnB,YAAMZ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAN,CAAW,iCAAX,EAA8C;AACjEP,QAAAA,KAAK,EAAEkB;AAD0D,OAA9C,CAAvB;AAIA,UAAI,CAACZ,QAAQ,CAACK,IAAT,CAAcC,OAAf,IAA0B,CAACN,QAAQ,CAACK,IAAT,CAAcX,KAA7C,EAAoD,OAAO,IAAP;AAEpD,aAAOM,QAAQ,CAACK,IAAT,CAAcX,KAArB;AACH,KAtHe;AAAA;;AAShBE,EAAAA,eAAe,CAACF,KAAD,EAAgB;AAC3BsB,IAAAA,YAAY,CAACK,OAAb,CAAqB,aAArB,EAAoC3B,KAApC;AAEA,UAAM4B,GAAG,GAAGtC,MAAM,EAAlB;AACAgC,IAAAA,YAAY,CAACK,OAAb,CAAqB,oBAArB,EAA2CC,GAAG,CAACC,WAAJ,EAA3C;AACH;;AAEDT,EAAAA,gBAAgB,CAACpB,KAAD,EAAgB;AAC5BsB,IAAAA,YAAY,CAACK,OAAb,CAAqB,cAArB,EAAqC3B,KAArC;AAEA,UAAM4B,GAAG,GAAGtC,MAAM,EAAlB;AACAgC,IAAAA,YAAY,CAACK,OAAb,CAAqB,qBAArB,EAA4CC,GAAG,CAACC,WAAJ,EAA5C;AACH;;AAEDC,EAAAA,OAAO,GAAY;AACf,UAAMf,WAAW,GAAGO,YAAY,CAACG,OAAb,CAAqB,aAArB,CAApB;;AAEA,QAAIV,WAAJ,EAAiB;AACb,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAwCD;AACQhB,EAAAA,uBAAR,GAAkD;AAC9C,UAAMgC,UAAU,GAAG,KAAKnC,gBAAL,CAAsB,aAAtB,CAAnB;;AACA,WAAOmC,UAAU,IAAI,IAAd,GACDA,UAAU,IAAI,KAAKtC,mBADlB,GAED,IAFN;AAGH;;AAEOU,EAAAA,wBAAR,GAAmD;AAC/C,UAAM4B,UAAU,GAAG,KAAKnC,gBAAL,CAAsB,qBAAtB,CAAnB;;AAEA,WAAOmC,UAAU,IAAI,IAAd,GAAqBA,UAAU,IAAI,CAAnC,GAAuC,IAA9C;AACH;;AAOOnC,EAAAA,gBAAR,CAAyBoC,QAAzB,EAA0D;AACtD,UAAMC,OAAO,GAAGX,YAAY,CAACG,OAAb,CAAqBO,QAArB,CAAhB;AAEA,QAAI,CAACC,OAAL,EAAc,OAAO,IAAP;AAEd,UAAMC,IAAI,GAAG5C,MAAM,CAAC2C,OAAD,CAAnB;AACA,UAAML,GAAG,GAAGtC,MAAM,EAAlB;AACA,UAAM6C,IAAI,GAAG7C,MAAM,CAAC8C,QAAP,CAAgBR,GAAG,CAACO,IAAJ,CAASD,IAAT,CAAhB,CAAb;AAEA,WAAOG,IAAI,CAACC,GAAL,CAASH,IAAI,CAACI,SAAL,EAAT,CAAP;AACH;;AApGe;;AAyHpB,eAAe,IAAI/C,aAAJ,EAAf","sourcesContent":["import moment from \"moment\";\r\nimport axios from \"axios\";\r\n\r\nclass TokenServices {\r\n    // Settings\r\n    accessTokenLifetime: number = 1800;\r\n    refreshTokenLifetime: number = 31536000;\r\n\r\n    // Api\r\n    accessTokenLeftTime = () => this._secondsToUpdate(\"accessToken\");\r\n    refreshTokenLeftTime = () => this._secondsToUpdate(\"refreshToken\");\r\n\r\n    saveAccessToken(token: string) {\r\n        localStorage.setItem(\"accessToken\", token);\r\n\r\n        const now = moment();\r\n        localStorage.setItem(\"accessTokenSetDate\", now.toISOString());\r\n    }\r\n\r\n    saveRefreshToken(token: string) {\r\n        localStorage.setItem(\"refreshToken\", token);\r\n\r\n        const now = moment();\r\n        localStorage.setItem(\"refreshTokenSetDate\", now.toISOString());\r\n    }\r\n\r\n    isLogin(): boolean {\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n        if (accessToken) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    checkAndUpdateToken = async (): Promise<boolean | null> => {\r\n        if (this._needRefreshAccessToken()) {\r\n            const token = await this._getNewAccessToken();\r\n\r\n            if (token) {\r\n                this.saveAccessToken(token ?? \"\");\r\n            }\r\n        }\r\n\r\n        return !this._needRefreshRefreshToken();\r\n    };\r\n\r\n    generateNewTokens = async (id: string): Promise<void> => {\r\n        const responce = await axios.post(\r\n            `${process.env.REACT_APP_SERVER_URL}/api/generate-token`,\r\n            { id: id }\r\n        );\r\n\r\n        if (!responce.data.success) {\r\n            console.log(\"!success\");\r\n\r\n            return;\r\n        }\r\n\r\n        const accessToken = responce.data.tokens.access;\r\n        const refreshToken = responce.data.tokens.refresh;\r\n\r\n        this.saveAccessToken(accessToken);\r\n        this.saveRefreshToken(refreshToken);\r\n    };\r\n\r\n    removeTokens = () => {\r\n        localStorage.removeItem(\"refreshToken\");\r\n        localStorage.removeItem(\"refreshTokenSetDate\");\r\n        localStorage.removeItem(\"accessToken\");\r\n        localStorage.removeItem(\"accessTokenSetDate\");\r\n    };\r\n\r\n    // Core\r\n    private _needRefreshAccessToken(): boolean | null {\r\n        const leftToLive = this._secondsToUpdate(\"accessToken\");\r\n        return leftToLive != null\r\n            ? leftToLive >= this.accessTokenLifetime\r\n            : null;\r\n    }\r\n\r\n    private _needRefreshRefreshToken(): boolean | null {\r\n        const leftToLive = this._secondsToUpdate(\"refreshTokenSetDate\");\r\n\r\n        return leftToLive != null ? leftToLive <= 0 : null;\r\n    }\r\n\r\n    private _getAccessToken = (): string | null =>\r\n        localStorage.getItem(\"accessToken\");\r\n    private _getRefreshToken = (): string | null =>\r\n        localStorage.getItem(\"refreshToken\");\r\n\r\n    private _secondsToUpdate(tokenKey: string): number | null {\r\n        const setDate = localStorage.getItem(tokenKey);\r\n\r\n        if (!setDate) return null;\r\n\r\n        const date = moment(setDate);\r\n        const now = moment();\r\n        const diff = moment.duration(now.diff(date));\r\n\r\n        return Math.abs(diff.asSeconds());\r\n    }\r\n\r\n    private _getNewAccessToken = async (): Promise<string | null> => {\r\n        if (this._needRefreshRefreshToken()) {\r\n            return null;\r\n        }\r\n\r\n        const refreshToken = this._getRefreshToken();\r\n\r\n        if (!refreshToken) return null;\r\n\r\n        const responce = await axios.post(\"http://localhost:5000/api/token\", {\r\n            token: refreshToken,\r\n        });\r\n\r\n        if (!responce.data.success || !responce.data.token) return null;\r\n\r\n        return responce.data.token;\r\n    };\r\n}\r\n\r\nexport default new TokenServices();\r\n"]},"metadata":{},"sourceType":"module"}