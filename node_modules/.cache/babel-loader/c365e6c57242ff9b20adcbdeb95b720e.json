{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _temp;\n\nimport { observable, action } from \"mobx\";\nimport jsonp from \"jsonp\";\nimport axios from \"axios\";\nlet FindDoctorController = (_class = (_temp = class FindDoctorController {\n  constructor() {\n    _initializerDefineProperty(this, \"doctors\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"isInfinyLoading\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"currentPage\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"isErrorBadgeOpen\", _descriptor5, this);\n\n    this.amountDoctorsOnOnePage = 50;\n\n    _initializerDefineProperty(this, \"mobileFiltersOpen\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"name\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"isDownward\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"openedFilter\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"activeFilters\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"specialities\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"qualification\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"workExperience\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"rating\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"isSelectCityModalOpen\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"selectedCities\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"queryCities\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"workPlan\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"child\", _descriptor19, this);\n\n    this.loadNextPage = async () => {\n      if (this.isInfinyLoading) {\n        return;\n      }\n\n      this.isInfinyLoading = true; // todo: filter\n\n      const doctors = await this.fecthDoctors(this.currentPage * this.amountDoctorsOnOnePage);\n      this.setDoctorAndOffLoading(doctors);\n    };\n\n    _initializerDefineProperty(this, \"setDoctorAndOffLoading\", _descriptor20, this);\n\n    this.getFilter = (from, amount) => {\n      let filter = \"\";\n      const mapFilter = {\n        from,\n        amount,\n        fullName: this.name,\n        isDownward: this.isDownward,\n        qualification: this.qualification,\n        rating: this.rating,\n        city: this.selectedCities,\n        workPlan: this.workPlan\n      };\n      Object.keys(mapFilter).forEach(key => {\n        // @ts-ignore\n        const value = mapFilter[key];\n        const defined = Array.isArray(value) ? value.length > 0 : value ? true : false;\n\n        if (defined) {\n          filter += `&${key}=${JSON.stringify(value)}`;\n        }\n      }); //* Speciality\n\n      if (this.specialities.length > 0) {\n        const mapSpeciality = {\n          Педиатр: \"Pediatrician\",\n          Терапевт: \"Therapist\",\n          Дерматолог: \"Dermatologist\",\n          Психолог: \"Psychologist\",\n          Дефектолог: \"Defectologis\",\n          Логопед: \"Logopedist\",\n          Диетолог: \"Nutritionist\",\n          Аллерголог: \"Allergist\"\n        };\n        const speciality = [];\n        this.specialities.forEach(key => {\n          // @ts-ignore\n          speciality.push(mapSpeciality[key]);\n        });\n        filter += `&speciality=${JSON.stringify(speciality)}`;\n      } //* Experience\n\n\n      if (this.workExperience.length > 0) {\n        const mapExperience = {\n          \"Меньше 1 года\": \"Less Year\",\n          \"1 год\": \"OneYear\",\n          \"3 года\": \"ThreeYears\",\n          \"5 лет\": \"FiveYears\",\n          \"Больше 5 лет\": \"MoreFiveYears\"\n        };\n        const experience = [];\n        this.workExperience.forEach(key => {\n          // @ts-ignore\n          experience.push(mapExperience[key]);\n          console.log(key);\n        });\n        filter += `&experience=${JSON.stringify(experience)}`;\n      } //* Child\n\n\n      if (this.child.length !== 0) {\n        filter += `&isChild=${this.child.includes(\"child\")}`;\n        filter += `&isAdult=${this.child.includes(\"adult\")}`;\n      }\n\n      return filter;\n    };\n\n    this.fecthDoctors = async (from = 0, amount = this.amountDoctorsOnOnePage, needFilter = false) => {\n      var _data$doctors;\n\n      const filter = needFilter ? this.getFilter(from, amount) : undefined;\n      const data = await axios.get(process.env.REACT_APP_SERVER_URL + `/api/doctors?type=tile${filter}`).then(data => data.data).catch(() => {\n        return {\n          success: false\n        };\n      });\n\n      if (!data.success) {\n        this.openBadge();\n      }\n\n      return (_data$doctors = data.doctors) !== null && _data$doctors !== void 0 ? _data$doctors : [];\n    };\n\n    this.addOrRemoveItem = (array, value) => {\n      const index = array.indexOf(value);\n\n      if (index !== -1) {\n        array.splice(index, 1);\n      } else {\n        array.push(value);\n      }\n\n      return array;\n    };\n\n    _initializerDefineProperty(this, \"clickOnFilter\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"clickOnSpecialityFilter\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"clickOnWorkExperienceFilter\", _descriptor23, this);\n\n    _initializerDefineProperty(this, \"clickOnRating\", _descriptor24, this);\n\n    _initializerDefineProperty(this, \"typeCity\", _descriptor25, this);\n\n    _initializerDefineProperty(this, \"addCity\", _descriptor26, this);\n\n    _initializerDefineProperty(this, \"removeCity\", _descriptor27, this);\n\n    _initializerDefineProperty(this, \"onModalSubmit\", _descriptor28, this);\n\n    _initializerDefineProperty(this, \"clickOnWorkPlan\", _descriptor29, this);\n\n    _initializerDefineProperty(this, \"clickOnChild\", _descriptor30, this);\n\n    _initializerDefineProperty(this, \"clickOnQualification\", _descriptor31, this);\n\n    _initializerDefineProperty(this, \"clearFilter\", _descriptor32, this);\n\n    _initializerDefineProperty(this, \"clickOnDownward\", _descriptor33, this);\n\n    _initializerDefineProperty(this, \"onNameChange\", _descriptor34, this);\n\n    this.openBadge = () => {\n      this.isErrorBadgeOpen = true;\n      setTimeout(() => {\n        this.isErrorBadgeOpen = false;\n      }, 5000);\n    };\n\n    this.isLoading = true;\n    this.fecthDoctors(0, 50, true).then(docs => {\n      this.doctors = docs;\n      this.isLoading = false;\n    });\n  } // Filters\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"doctors\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"isInfinyLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"currentPage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"isErrorBadgeOpen\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"mobileFiltersOpen\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"name\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"isDownward\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"openedFilter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"activeFilters\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"specialities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"qualification\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"workExperience\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"rating\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"isSelectCityModalOpen\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"selectedCities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"queryCities\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"workPlan\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"child\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"setDoctorAndOffLoading\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return doctors => {\n      this.doctors = this.doctors.concat(this.doctors, doctors);\n      this.isInfinyLoading = false;\n      this.currentPage += 1;\n    };\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"clickOnFilter\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.openedFilter = value === this.openedFilter ? \"\" : value;\n    };\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"clickOnSpecialityFilter\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.specialities = this.addOrRemoveItem(this.specialities, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"clickOnWorkExperienceFilter\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.workExperience = this.addOrRemoveItem(this.workExperience, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, \"clickOnRating\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.rating = this.addOrRemoveItem(this.rating, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, \"typeCity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      jsonp(`https://kladr-api.ru/api.php?query=${value}&contentType=city&limit=11`, undefined, (err, data) => {\n        if (!err) {\n          const cities = data.result.splice(1, 10);\n          this.queryCities = cities.map(e => e.name);\n        }\n      });\n    };\n  }\n}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, \"addCity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return i => {\n      if (!this.selectedCities.includes(this.queryCities[i])) {\n        this.selectedCities.push(this.queryCities[i]);\n      }\n    };\n  }\n}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, \"removeCity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return i => {\n      this.selectedCities.splice(i, 1);\n    };\n  }\n}), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, \"onModalSubmit\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.isSelectCityModalOpen = false;\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, \"clickOnWorkPlan\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.workPlan = this.addOrRemoveItem(this.workPlan, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor30 = _applyDecoratedDescriptor(_class.prototype, \"clickOnChild\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.child = this.addOrRemoveItem(this.child, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor31 = _applyDecoratedDescriptor(_class.prototype, \"clickOnQualification\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.qualification = this.addOrRemoveItem(this.child, value);\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor32 = _applyDecoratedDescriptor(_class.prototype, \"clearFilter\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.specialities = [];\n      this.workExperience = [];\n      this.rating = [];\n      this.selectedCities = [];\n      this.workPlan = [];\n      this.child = [];\n    };\n  }\n}), _descriptor33 = _applyDecoratedDescriptor(_class.prototype, \"clickOnDownward\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.isDownward = !this.isDownward;\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n}), _descriptor34 = _applyDecoratedDescriptor(_class.prototype, \"onNameChange\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return value => {\n      this.name = value;\n      this.fecthDoctors(0, 50, true).then(docs => this.doctors = docs);\n    };\n  }\n})), _class);\nexport default new FindDoctorController();","map":{"version":3,"sources":["C:/react/medicine-consultation/client/src/modules/doctors/controllers/find-doctor-controller.ts"],"names":["observable","action","jsonp","axios","FindDoctorController","constructor","amountDoctorsOnOnePage","loadNextPage","isInfinyLoading","doctors","fecthDoctors","currentPage","setDoctorAndOffLoading","getFilter","from","amount","filter","mapFilter","fullName","name","isDownward","qualification","rating","city","selectedCities","workPlan","Object","keys","forEach","key","value","defined","Array","isArray","length","JSON","stringify","specialities","mapSpeciality","Педиатр","Терапевт","Дерматолог","Психолог","Дефектолог","Логопед","Диетолог","Аллерголог","speciality","push","workExperience","mapExperience","experience","console","log","child","includes","needFilter","undefined","data","get","process","env","REACT_APP_SERVER_URL","then","catch","success","openBadge","addOrRemoveItem","array","index","indexOf","splice","isErrorBadgeOpen","setTimeout","isLoading","docs","concat","openedFilter","err","cities","result","queryCities","map","e","i","isSelectCityModalOpen"],"mappings":"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","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport jsonp from \"jsonp\";\r\nimport axios from \"axios\";\r\n\r\nclass FindDoctorController {\r\n    @observable doctors: DoctorType[] = [];\r\n    @observable isLoading: boolean = false;\r\n    @observable isInfinyLoading: boolean = false;\r\n    @observable currentPage = 0;\r\n    @observable isErrorBadgeOpen: boolean = false;\r\n    private amountDoctorsOnOnePage = 50;\r\n\r\n    constructor() {\r\n        this.isLoading = true;\r\n        this.fecthDoctors(0, 50, true).then((docs) => {\r\n            this.doctors = docs;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    // Filters\r\n    @observable mobileFiltersOpen: boolean = false;\r\n    @observable name: string = \"\";\r\n    @observable isDownward: boolean = false;\r\n    @observable openedFilter: string = \"\";\r\n    @observable activeFilters: string[] = [];\r\n    @observable specialities: string[] = [];\r\n    @observable qualification: string[] = [];\r\n    @observable workExperience: string[] = [];\r\n    @observable rating: number[] = [];\r\n    @observable isSelectCityModalOpen: boolean = false;\r\n    @observable selectedCities: string[] = [];\r\n    @observable queryCities: string[] = [];\r\n    @observable workPlan: string[] = [];\r\n    @observable child: string[] = [];\r\n\r\n    loadNextPage = async () => {\r\n        if (this.isInfinyLoading) {\r\n            return;\r\n        }\r\n\r\n        this.isInfinyLoading = true;\r\n\r\n        // todo: filter\r\n\r\n        const doctors = await this.fecthDoctors(\r\n            this.currentPage * this.amountDoctorsOnOnePage\r\n        );\r\n        this.setDoctorAndOffLoading(doctors);\r\n    };\r\n\r\n    @action private setDoctorAndOffLoading = (doctors: DoctorType[]) => {\r\n        this.doctors = this.doctors.concat(this.doctors, doctors);\r\n        this.isInfinyLoading = false;\r\n        this.currentPage += 1;\r\n    };\r\n\r\n    private getFilter = (from: number, amount: number): string => {\r\n        let filter = \"\";\r\n\r\n        const mapFilter = {\r\n            from,\r\n            amount,\r\n            fullName: this.name,\r\n            isDownward: this.isDownward,\r\n            qualification: this.qualification,\r\n            rating: this.rating,\r\n            city: this.selectedCities,\r\n            workPlan: this.workPlan,\r\n        };\r\n\r\n        Object.keys(mapFilter).forEach((key) => {\r\n            // @ts-ignore\r\n            const value = mapFilter[key];\r\n\r\n            const defined = Array.isArray(value)\r\n                ? value.length > 0\r\n                : value\r\n                ? true\r\n                : false;\r\n\r\n            if (defined) {\r\n                filter += `&${key}=${JSON.stringify(value)}`;\r\n            }\r\n        });\r\n\r\n        //* Speciality\r\n        if (this.specialities.length > 0) {\r\n            const mapSpeciality = {\r\n                Педиатр: \"Pediatrician\",\r\n                Терапевт: \"Therapist\",\r\n                Дерматолог: \"Dermatologist\",\r\n                Психолог: \"Psychologist\",\r\n                Дефектолог: \"Defectologis\",\r\n                Логопед: \"Logopedist\",\r\n                Диетолог: \"Nutritionist\",\r\n                Аллерголог: \"Allergist\",\r\n            };\r\n\r\n            const speciality: string[] = [];\r\n            this.specialities.forEach((key) => {\r\n                // @ts-ignore\r\n                speciality.push(mapSpeciality[key]);\r\n            });\r\n\r\n            filter += `&speciality=${JSON.stringify(speciality)}`;\r\n        }\r\n\r\n        //* Experience\r\n        if (this.workExperience.length > 0) {\r\n            const mapExperience = {\r\n                \"Меньше 1 года\": \"Less Year\",\r\n                \"1 год\": \"OneYear\",\r\n                \"3 года\": \"ThreeYears\",\r\n                \"5 лет\": \"FiveYears\",\r\n                \"Больше 5 лет\": \"MoreFiveYears\",\r\n            };\r\n\r\n            const experience: string[] = [];\r\n            this.workExperience.forEach((key) => {\r\n                // @ts-ignore\r\n                experience.push(mapExperience[key]);\r\n                console.log(key);\r\n            });\r\n\r\n            filter += `&experience=${JSON.stringify(experience)}`;\r\n        }\r\n\r\n        //* Child\r\n        if (this.child.length !== 0) {\r\n            filter += `&isChild=${this.child.includes(\"child\")}`;\r\n            filter += `&isAdult=${this.child.includes(\"adult\")}`;\r\n        }\r\n\r\n        return filter;\r\n    };\r\n\r\n    private fecthDoctors = async (\r\n        from: number = 0,\r\n        amount: number = this.amountDoctorsOnOnePage,\r\n        needFilter: boolean = false\r\n    ): Promise<DoctorType[]> => {\r\n        const filter: string | undefined = needFilter\r\n            ? this.getFilter(from, amount)\r\n            : undefined;\r\n\r\n        const data = await axios\r\n            .get(\r\n                process.env.REACT_APP_SERVER_URL +\r\n                    `/api/doctors?type=tile${filter}`\r\n            )\r\n            .then((data) => data.data)\r\n            .catch(() => {\r\n                return {\r\n                    success: false,\r\n                };\r\n            });\r\n\r\n        if (!data.success) {\r\n            this.openBadge();\r\n        }\r\n\r\n        return data.doctors ?? [];\r\n    };\r\n\r\n    private addOrRemoveItem = (array: any[], value: any): Array<any> => {\r\n        const index = array.indexOf(value);\r\n        if (index !== -1) {\r\n            array.splice(index, 1);\r\n        } else {\r\n            array.push(value);\r\n        }\r\n\r\n        return array;\r\n    };\r\n\r\n    @action clickOnFilter = (value: string): void => {\r\n        this.openedFilter = value === this.openedFilter ? \"\" : value;\r\n    };\r\n\r\n    @action clickOnSpecialityFilter = (value: string): void => {\r\n        this.specialities = this.addOrRemoveItem(this.specialities, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action clickOnWorkExperienceFilter = (value: string): void => {\r\n        this.workExperience = this.addOrRemoveItem(this.workExperience, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action clickOnRating = (value: number): void => {\r\n        this.rating = this.addOrRemoveItem(this.rating, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action typeCity = (value: string): void => {\r\n        jsonp(\r\n            `https://kladr-api.ru/api.php?query=${value}&contentType=city&limit=11`,\r\n            undefined,\r\n            (err: any, data: any) => {\r\n                if (!err) {\r\n                    const cities = data.result.splice(1, 10);\r\n                    this.queryCities = cities.map((e: any) => e.name);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    @action addCity = (i: number): void => {\r\n        if (!this.selectedCities.includes(this.queryCities[i])) {\r\n            this.selectedCities.push(this.queryCities[i]);\r\n        }\r\n    };\r\n\r\n    @action removeCity = (i: number): void => {\r\n        this.selectedCities.splice(i, 1);\r\n    };\r\n\r\n    @action onModalSubmit = (): void => {\r\n        this.isSelectCityModalOpen = false;\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action clickOnWorkPlan = (value: string): void => {\r\n        this.workPlan = this.addOrRemoveItem(this.workPlan, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n    @action clickOnChild = (value: string): void => {\r\n        this.child = this.addOrRemoveItem(this.child, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action clickOnQualification = (value: string): void => {\r\n        this.qualification = this.addOrRemoveItem(this.child, value);\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action clearFilter = (): void => {\r\n        this.specialities = [];\r\n        this.workExperience = [];\r\n        this.rating = [];\r\n        this.selectedCities = [];\r\n        this.workPlan = [];\r\n        this.child = [];\r\n    };\r\n\r\n    @action clickOnDownward = (): void => {\r\n        this.isDownward = !this.isDownward;\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    @action onNameChange = (value: string): void => {\r\n        this.name = value;\r\n        this.fecthDoctors(0, 50, true).then((docs) => (this.doctors = docs));\r\n    };\r\n\r\n    private openBadge = () => {\r\n        this.isErrorBadgeOpen = true;\r\n        setTimeout(() => {\r\n            this.isErrorBadgeOpen = false;\r\n        }, 5000);\r\n    };\r\n}\r\n\r\nexport default new FindDoctorController();\r\n"]},"metadata":{},"sourceType":"module"}