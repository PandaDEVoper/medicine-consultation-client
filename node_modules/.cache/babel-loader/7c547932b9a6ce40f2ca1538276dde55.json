{"ast":null,"code":"import _initializerDefineProperty from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport axios from \"axios\";\nimport { observable, action } from \"mobx\";\nimport settingDoctorController from \"../../settings/controller\";\nlet DetailController = (_class = (_temp = class DetailController {\n  constructor() {\n    _initializerDefineProperty(this, \"doctorId\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"doctor\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"fetchDoctor\", _descriptor4, this);\n\n    this._fetchDoctor = async (id) => {\n      const response = await axios.get(process.env.REACT_APP_SERVER_URL + \"/api/doctor/\" + id).then(data => data.data).catch(e => e.response);\n\n      if (!(response === null || response === void 0 ? void 0 : response.success)) {\n        // todo: error handling\n        return;\n      }\n\n      return await response.doctor;\n    };\n\n    this.formatExperience = experience => {\n      if (experience >= 365) return Math.floor(experience / 365) + \"\";\n      if (experience >= 212) return \"больше 6 месяцев\";\n      if (experience >= 182) return \"6 месяцев\";\n      if (experience >= 120) return \"больше 3 месяцев\";\n      if (experience >= 90) return \"3 месяца\";\n      if (experience >= 60) return \"2 месяца\";\n      if (experience >= 30) return \"1 месяц\";\n      if (experience === 0) return \"Отсутствует\";\n      const fEnding = [1, 21];\n      const sEnding = [2, 3, 4, 22, 23, 24];\n      if (fEnding.includes(experience)) return experience + \" день\";\n      if (sEnding.includes(experience)) return experience + \" дня\";\n      return experience + \" дней\";\n    };\n\n    this.declOfNum = (number, words) => {\n      return words[number % 100 > 4 && number % 100 < 20 ? 2 : [2, 0, 1, 1, 1, 2][number % 10 < 5 ? number % 10 : 5]];\n    };\n\n    _initializerDefineProperty(this, \"fromDate\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"toDate\", _descriptor6, this);\n\n    this.getWeekDay = date => {\n      if (date.getDay() === 0) {\n        return 6;\n      }\n\n      return date.getDay() - 1;\n    };\n\n    this.getFormattedDate = date => {\n      let day = date.getDate() + \"\",\n          month = date.getMonth() + 1 + \"\";\n\n      if (day.length === 1) {\n        day = \"0\" + day;\n      }\n\n      if (month.length === 1) {\n        month = \"0\" + month;\n      }\n\n      return `${day}.${month}`;\n    };\n\n    this.addDays = (date, amount) => {\n      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + amount);\n    };\n\n    this.getFormattedFromDate = () => this.getFormattedDate(this.fromDate);\n\n    this.getFormattedToDate = () => this.getFormattedDate(this.toDate);\n\n    this.nextWeek = () => {\n      this.fromDate = this.addDays(this.fromDate, 7);\n      this.toDate = this.addDays(this.toDate, 7);\n    };\n\n    this.previousWeek = () => {\n      this.fromDate = this.addDays(this.fromDate, -7);\n      this.toDate = this.addDays(this.toDate, -7);\n    };\n\n    this.getUIDayMarker = occupied => {\n      // build all consultation time\n      const consultationTimeTitle = [];\n      let now = settingDoctorController.startConsultationAt;\n      const end = settingDoctorController.endConsultationAt;\n\n      while (end.biggerOrEqualThan(now)) {\n        consultationTimeTitle.push(now.format());\n        now = now.add(settingDoctorController.consultationTime.minutes);\n      }\n\n      const consultationTime = [];\n      let last;\n      let occupiedInARow = 0;\n      consultationTimeTitle.forEach((e, i) => {\n        const isOccupied = occupied.includes(i);\n\n        if (last && last.isOccupied && isOccupied && occupiedInARow <= 12 && window.screen.width > 425) {\n          occupiedInARow += 1;\n          last = {\n            title: last.title.split(\" - \")[0] + \" - \" + e,\n            isOccupied,\n            x: occupiedInARow\n          };\n          consultationTime[consultationTime.length - 1] = last;\n        } else {\n          last = {\n            title: e,\n            isOccupied,\n            x: 0\n          };\n          consultationTime.push(last);\n          occupiedInARow = 0;\n        }\n      });\n      return consultationTime;\n    };\n\n    const _now = new Date();\n\n    this.fromDate = new Date(_now.getFullYear(), _now.getMonth(), _now.getDate() - this.getWeekDay(_now));\n    this.toDate = new Date(_now.getFullYear(), _now.getMonth(), _now.getDate() + (7 - this.getWeekDay(_now) - 1));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"doctorId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"doctor\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"fetchDoctor\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.loading = true;\n\n      this._fetchDoctor(id).then(action(doctor => {\n        this.doctor = doctor;\n        this.loading = false;\n      }));\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"fromDate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"toDate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexport default new DetailController();","map":{"version":3,"sources":["c:/react/medicine-consultation/client/src/modules/doctors/controllers/detail-controller.ts"],"names":["axios","observable","action","settingDoctorController","DetailController","constructor","_fetchDoctor","id","response","get","process","env","REACT_APP_SERVER_URL","then","data","catch","e","success","doctor","formatExperience","experience","Math","floor","fEnding","sEnding","includes","declOfNum","number","words","getWeekDay","date","getDay","getFormattedDate","day","getDate","month","getMonth","length","addDays","amount","Date","getFullYear","getFormattedFromDate","fromDate","getFormattedToDate","toDate","nextWeek","previousWeek","getUIDayMarker","occupied","consultationTimeTitle","now","startConsultationAt","end","endConsultationAt","biggerOrEqualThan","push","format","add","consultationTime","minutes","last","occupiedInARow","forEach","i","isOccupied","window","screen","width","title","split","x","loading"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { observable, action } from \"mobx\";\r\nimport settingDoctorController from \"../../settings/controller\";\r\n\r\nclass DetailController {\r\n    constructor() {\r\n        const now = new Date();\r\n        this.fromDate = new Date(\r\n            now.getFullYear(),\r\n            now.getMonth(),\r\n            now.getDate() - this.getWeekDay(now)\r\n        );\r\n        this.toDate = new Date(\r\n            now.getFullYear(),\r\n            now.getMonth(),\r\n            now.getDate() + (7 - this.getWeekDay(now) - 1)\r\n        );\r\n    }\r\n\r\n    @observable doctorId: string | undefined;\r\n    @observable doctor: DoctorType | undefined;\r\n    @observable loading: boolean = true;\r\n\r\n    @action public fetchDoctor = (id: string): void => {\r\n        this.loading = true;\r\n        this._fetchDoctor(id).then(\r\n            action((doctor) => {\r\n                this.doctor = doctor;\r\n                this.loading = false;\r\n            })\r\n        );\r\n    };\r\n\r\n    private _fetchDoctor = async (\r\n        id: string\r\n    ): Promise<DoctorType | undefined> => {\r\n        const response = await axios\r\n            .get(process.env.REACT_APP_SERVER_URL + \"/api/doctor/\" + id)\r\n            .then((data) => data.data)\r\n            .catch((e) => e.response);\r\n\r\n        if (!response?.success) {\r\n            // todo: error handling\r\n            return;\r\n        }\r\n\r\n        return await response.doctor;\r\n    };\r\n\r\n    formatExperience = (experience: number): string => {\r\n        if (experience >= 365) return Math.floor(experience / 365) + \"\";\r\n        if (experience >= 212) return \"больше 6 месяцев\";\r\n        if (experience >= 182) return \"6 месяцев\";\r\n        if (experience >= 120) return \"больше 3 месяцев\";\r\n        if (experience >= 90) return \"3 месяца\";\r\n        if (experience >= 60) return \"2 месяца\";\r\n        if (experience >= 30) return \"1 месяц\";\r\n\r\n        if (experience === 0) return \"Отсутствует\";\r\n\r\n        const fEnding = [1, 21];\r\n        const sEnding = [2, 3, 4, 22, 23, 24];\r\n        if (fEnding.includes(experience)) return experience + \" день\";\r\n        if (sEnding.includes(experience)) return experience + \" дня\";\r\n        return experience + \" дней\";\r\n    };\r\n\r\n    declOfNum = (number: number, words: string[]) => {\r\n        return words[\r\n            number % 100 > 4 && number % 100 < 20\r\n                ? 2\r\n                : [2, 0, 1, 1, 1, 2][number % 10 < 5 ? number % 10 : 5]\r\n        ];\r\n    };\r\n\r\n    // Selector\r\n    @observable fromDate: Date;\r\n    @observable toDate: Date;\r\n\r\n    private getWeekDay = (date: Date): number => {\r\n        if (date.getDay() === 0) {\r\n            return 6;\r\n        }\r\n\r\n        return date.getDay() - 1;\r\n    };\r\n\r\n    private getFormattedDate = (date: Date): string => {\r\n        let day: string = date.getDate() + \"\",\r\n            month: string = date.getMonth() + 1 + \"\";\r\n\r\n        if (day.length === 1) {\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        if (month.length === 1) {\r\n            month = \"0\" + month;\r\n        }\r\n\r\n        return `${day}.${month}`;\r\n    };\r\n\r\n    private addDays = (date: Date, amount: number): Date => {\r\n        return new Date(\r\n            date.getFullYear(),\r\n            date.getMonth(),\r\n            date.getDate() + amount\r\n        );\r\n    };\r\n\r\n    getFormattedFromDate = () => this.getFormattedDate(this.fromDate);\r\n    getFormattedToDate = () => this.getFormattedDate(this.toDate);\r\n\r\n    nextWeek = () => {\r\n        this.fromDate = this.addDays(this.fromDate, 7);\r\n        this.toDate = this.addDays(this.toDate, 7);\r\n    };\r\n\r\n    previousWeek = () => {\r\n        this.fromDate = this.addDays(this.fromDate, -7);\r\n        this.toDate = this.addDays(this.toDate, -7);\r\n    };\r\n\r\n    getUIDayMarker = (occupied: number[]): Time[] => {\r\n        // build all consultation time\r\n        const consultationTimeTitle: string[] = [];\r\n\r\n        let now = settingDoctorController.startConsultationAt;\r\n        const end = settingDoctorController.endConsultationAt;\r\n\r\n        while (end.biggerOrEqualThan(now)) {\r\n            consultationTimeTitle.push(now.format());\r\n            now = now.add(settingDoctorController.consultationTime.minutes);\r\n        }\r\n\r\n        const consultationTime: Time[] = [];\r\n        let last: Time;\r\n        let occupiedInARow: number = 0;\r\n\r\n        consultationTimeTitle.forEach((e, i) => {\r\n            const isOccupied = occupied.includes(i);\r\n\r\n            if (\r\n                last &&\r\n                last.isOccupied &&\r\n                isOccupied &&\r\n                occupiedInARow <= 12 &&\r\n                window.screen.width > 425\r\n            ) {\r\n                occupiedInARow += 1;\r\n                last = {\r\n                    title: last.title.split(\" - \")[0] + \" - \" + e,\r\n                    isOccupied,\r\n                    x: occupiedInARow,\r\n                };\r\n                consultationTime[consultationTime.length - 1] = last;\r\n            } else {\r\n                last = {\r\n                    title: e,\r\n                    isOccupied,\r\n                    x: 0,\r\n                };\r\n                consultationTime.push(last);\r\n                occupiedInARow = 0;\r\n            }\r\n        });\r\n\r\n        return consultationTime;\r\n    };\r\n}\r\n\r\ntype Time = {\r\n    title: string;\r\n    isOccupied?: boolean;\r\n    x: number;\r\n};\r\n\r\nexport default new DetailController();\r\n"]},"metadata":{},"sourceType":"module"}