{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;\n\nimport { observable, action } from \"mobx\";\nimport axios from \"axios\"; // Another stores & services\n\nimport loginUIStore from \"./stores/loginUI\";\nimport signupUIStore from \"./stores/signupUI\";\nimport tokenServices from \"../../services/token-services\";\nlet AuthStore = (_class = (_temp = class AuthStore {\n  constructor() {\n    _initializerDefineProperty(this, \"user\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"uid\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"isLogin\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"goToHomeTrigger\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"login\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"signup\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"doctorSignup\", _descriptor7, this);\n\n    this.isLogin = tokenServices.isLogin();\n    console.log(`isLogin=${this.isLogin}`); // Tokens\n\n    tokenServices.checkAndUpdateToken().then(async isRefreshTokenOk => {\n      if (!isRefreshTokenOk) {\n        this.isLogin = false;\n        return null;\n      }\n\n      if (this.isLogin) {\n        var _localStorage$getItem;\n\n        this.uid = (_localStorage$getItem = localStorage.getItem(\"uid\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"\";\n\n        if (this.uid !== \"\") {\n          const response = await fetchUser(this.uid);\n          this.user = response !== null && response !== void 0 ? response : {};\n        }\n      }\n    });\n  } // Observables\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"user\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"uid\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"isLogin\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"goToHomeTrigger\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"login\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      // Remove all past errors\n      loginUIStore.setError(); // Get email & password from ui\n\n      const email = loginUIStore.email;\n      const password = loginUIStore.password; // validate\n\n      const isEmailOk = validateEmail(email);\n      const isPasswordOk = validatePassword(password);\n\n      if (!isEmailOk || !isPasswordOk) {\n        loginUIStore.setError(\"Неверный email или пароль\");\n        return;\n      }\n\n      try {\n        var _await$fetchUser;\n\n        // Send data to server\n        const response = await axios.post(`http://localhost:5000/api/login-user`, {\n          email,\n          password\n        }); //${process.env.REACT_APP_SERVER_URL}\n        // if !success --> show error\n\n        if (!response.data.success) {\n          loginUIStore.setError(\"Неверный email или пароль\");\n          return;\n        } // Set all data to localstorage & authStore\n\n\n        this.isLogin = true;\n        const id = response.data.id;\n        this.uid = id;\n        localStorage.setItem(\"uid\", id); // Generate & save new tokens\n\n        tokenServices.saveAccessToken(response.data.tokens.access);\n        tokenServices.saveRefreshToken(response.data.tokens.refresh); // Fetch user based on id\n\n        this.user = (_await$fetchUser = await fetchUser(id)) !== null && _await$fetchUser !== void 0 ? _await$fetchUser : {}; // Trigger home trigger to go to home page\n\n        this.goToHomeTrigger = !this.goToHomeTrigger;\n      } catch (e) {\n        console.log(\"Some error...\");\n        console.log(e);\n        signupUIStore.setErrorMessage(\"Произошла неизвестная ошибка. Попробуйте повторить попытку позднее.\");\n      }\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"signup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      // validate data from ui\n      const error = validateUserDataCreation();\n      if (error) return; // get data from ui\n\n      const name = signupUIStore.name;\n      const surname = signupUIStore.surname;\n      const phone = parseInt(formatStringPhoneToNumberString(signupUIStore.phone));\n      const email = signupUIStore.email;\n      const password = signupUIStore.password;\n      const isMale = signupUIStore.isMale;\n      const needMailing = signupUIStore.needMailing; // Create user\n\n      const user = {\n        name,\n        surname,\n        phone,\n        email,\n        password,\n        sex: isMale,\n        city: \"\",\n        country: \"\",\n        consultations: [],\n        reviews: [],\n        notificationEmail: email,\n        sendNotificationToEmail: needMailing,\n        sendMailingsToEmail: needMailing,\n        createdAt: new Date(),\n        lastActiveAt: new Date(),\n        favourites: [],\n        photoUrl: \"\"\n      };\n\n      try {\n        // send user to db\n        const response = await axios.post(`${process.env.REACT_APP_SERVER_URL}/api/user`, user).catch(e => {\n          return e.response;\n        }); // if !success --> show error\n\n        if (!response.data.success) {\n          const hasInvalidError = validateServerError(response.data.errors);\n\n          if (hasInvalidError) {\n            signupUIStore.setErrorMessage(\"Произошла непредвиденная ошибка. Повторите попытку позже\");\n            setTimeout(() => {\n              signupUIStore.setErrorMessage();\n            }, 5000);\n            return null;\n          }\n\n          return;\n        } // Tokens\n\n\n        const accessToken = response.data.tokens.access;\n        const refreshToken = response.data.tokens.refresh; // save given tokens\n\n        tokenServices.saveAccessToken(accessToken);\n        tokenServices.saveRefreshToken(refreshToken); // Save user id\n\n        const id = response.data.user.id;\n        localStorage.setItem(\"uid\", id); // Set user\n\n        this.user = user;\n        console.log(`Create user with id ${id}`); // Trigger home trigger to go to home page\n\n        this.goToHomeTrigger = !this.goToHomeTrigger;\n      } catch (e) {\n        console.error(e); // show error and hide it after 5s\n\n        signupUIStore.setShowError(true);\n        signupUIStore.setErrorMessage(\"Произошла непредвиденная ошибка. Повторите попытку позже\");\n        setTimeout(() => {\n          signupUIStore.setShowError(false);\n          setTimeout(() => {\n            signupUIStore.setErrorMessage();\n          }, 1000);\n        }, 5000);\n        return null;\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"doctorSignup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      try {\n        // validate data from ui\n        if (validateDoctorDataCreation(3)) return;\n        const doctor = {\n          name: signupUIStore.name,\n          surname: signupUIStore.surname,\n          phone: formatStringPhoneToNumberString(signupUIStore.phone),\n          email: signupUIStore.email,\n          sex: signupUIStore.isMale,\n          education: signupUIStore.institute,\n          speciality: signupUIStore.speciality,\n          yearEducation: signupUIStore.studyYears,\n          blankSeries: signupUIStore.blankSeries,\n          blankNumber: signupUIStore.blankNumber,\n          issueDate: signupUIStore.issueDate,\n          workPlaces: signupUIStore.workPlaces,\n          passportIssuedByWhom: signupUIStore.passportIssuedByWhom,\n          passportIssueDate: signupUIStore.passportIssueDate,\n          passportSeries: signupUIStore.passportSeries,\n          password: signupUIStore.password,\n          workExperience: signupUIStore.workExperience\n        }; // send doctor to db\n\n        const response = await axios.post(`${process.env.REACT_APP_SERVER_URL}/api/doctor-request/send`, doctor) // todo\n        .catch(e => {\n          return e.response;\n        }); // todo\n        // Show badge\n\n        signupUIStore.isBadgeOpen = true;\n        setTimeout(() => {\n          signupUIStore.isBadgeOpen = false;\n          setTimeout(() => {\n            signupUIStore.redirectToHomeTrigger = !signupUIStore.redirectToHomeTrigger;\n          }, 300);\n        }, 3300);\n      } catch (e) {\n        console.error(e); // show error and hide it after 5s\n\n        signupUIStore.setShowError(true);\n        signupUIStore.setErrorMessage(\"Произошла непредвиденная ошибка. Повторите попытку позже\");\n        setTimeout(() => {\n          signupUIStore.setShowError(false);\n          setTimeout(() => {\n            signupUIStore.setErrorMessage();\n          }, 1250);\n        }, 5000);\n        return null;\n      }\n    };\n  }\n})), _class); // Functions\n\nconst fetchUser = async uid => {\n  try {\n    const raw = await axios.get(`${process.env.REACT_APP_SERVER_URL}/api/user/${uid}`);\n    return raw.data.user;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nconst validateEmail = email => {\n  const re = /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\nconst validatePassword = password => password.length >= 8;\n\nconst validateUserDataCreation = () => {\n  signupUIStore.setErrorMessage();\n  let hasError = false; // name\n\n  if (signupUIStore.name.trim().length === 0) {\n    hasError = true;\n    signupUIStore.setNameError(\"Необходимо ввести ваше имя\");\n  } else {\n    signupUIStore.setNameError();\n  } // surname\n\n\n  if (signupUIStore.surname.trim().length === 0) {\n    hasError = true;\n    signupUIStore.setSurnameError(\"Необходимо ввести вашу фамилию\");\n  } else {\n    signupUIStore.setSurnameError();\n  } // phone\n\n\n  if (formatStringPhoneToNumberString(signupUIStore.phone).length !== 11) {\n    hasError = true;\n    signupUIStore.setPhoneError(\"Телефон введен неверно\");\n  } else {\n    signupUIStore.setPhoneError();\n  } // email\n\n\n  if (signupUIStore.email.trim().length === 0) {\n    hasError = true;\n    signupUIStore.setEmailError(\"Необходимо ввести вашу почту\");\n  } else {\n    signupUIStore.setEmailError();\n  } // password\n\n\n  if (signupUIStore.password.trim().length < 8) {\n    hasError = true;\n    signupUIStore.setPasswordError(\"Минимальная длина пароля - 8 символов\");\n  } else {\n    signupUIStore.setPasswordError(); // confirm password\n\n    if (signupUIStore.password !== signupUIStore.confirmPassword) {\n      hasError = true;\n      signupUIStore.setConfirmPasswordError(\"Пароли должны совпадать\");\n    } else {\n      signupUIStore.setConfirmPasswordError();\n    }\n  }\n\n  return hasError;\n};\n\nexport const validateDoctorDataCreation = stage => {\n  // Doctor Model is extends from user model\n  signupUIStore.setErrorMessage();\n  let hasError = false;\n\n  if (stage === 1) {\n    return validateUserDataCreation();\n  } else if (stage === 2) {\n    // education\n    if (signupUIStore.institute.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setInstituteError(\"Необходимо указать ваше образование\");\n    } else {\n      signupUIStore.setInstituteError();\n    } // speciality\n\n\n    if (signupUIStore.speciality.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setSpecialityError(\"Необходимо указать вашу специальность\");\n    } else {\n      signupUIStore.setSpecialityError();\n    } // year education\n\n\n    if (signupUIStore.studyYears.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setStudyYearsError(\"Необходимо указать годы обучения\");\n    } else {\n      signupUIStore.setStudyYearsError();\n    } // blankSeries\n\n\n    if (signupUIStore.blankSeries.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setBlankSeriesError(\"Необходимо указать серию бланка\");\n    } else {\n      signupUIStore.setBlankSeriesError();\n    } // blankSeries\n\n\n    if (signupUIStore.blankNumber.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setBlankNumberError(\"Необходимо указать номер бланка\");\n    } else {\n      signupUIStore.setBlankNumberError();\n    } // issueDate\n\n\n    if (signupUIStore.issueDate.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setIssueDateError(\"Необходимо указать дату выдачи\");\n    } else {\n      signupUIStore.setIssueDateError();\n    }\n  } else if (stage === 3) {\n    // passportIssuedByWhom\n    if (signupUIStore.passportIssuedByWhom.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setPassportIssuedByWhomError(\"Необходимо указать кем был выдан ваш паспорт\");\n    } else {\n      signupUIStore.setPassportIssuedByWhomError();\n    } // passportSeries\n\n\n    if (signupUIStore.passportSeries.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setPassportSeriesError(\"Необходимо указать серию\");\n    } else {\n      signupUIStore.setPassportSeriesError();\n    } // passportIssueDate\n\n\n    if (signupUIStore.passportIssueDate.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setPassportIssueDateError(\"Необходимо указать дату выдачи\");\n    } else {\n      signupUIStore.setPassportIssueDateError();\n    } // workExperience\n\n\n    if (signupUIStore.workExperience.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setWorkExperienceError(\"Необходимо указать ваш опыт\");\n    } else {\n      signupUIStore.setWorkExperienceError();\n    } // workPlaces\n\n\n    if (signupUIStore.workPlaces.trim().length === 0) {\n      hasError = true;\n      signupUIStore.setWorkPlacesError(\"Необходимо указать ваши места работы\");\n    } else {\n      signupUIStore.setWorkPlacesError();\n    }\n  }\n\n  return hasError;\n};\n\nconst validateServerError = errors => {\n  const getFormatError = type => {\n    switch (type) {\n      case ServerErrorType.email_format_error:\n        return \"Неверный формат\";\n\n      case ServerErrorType.length_error:\n        return \"Это поле обязательно\";\n\n      case ServerErrorType.phone_format_number:\n        return \"Неверный номер телефона\";\n\n      case ServerErrorType.required_error:\n        return \"Это поле обязательно\";\n    }\n  };\n\n  console.log(errors);\n  const keys = Object.keys(errors); // check invalid_error\n\n  const values = Object.values(ServerErrorType.invalid_error);\n\n  if (values.includes(ServerErrorType.invalid_error) || keys.length === 0) {\n    return false;\n  } // name\n\n\n  if (errors.name) {\n    signupUIStore.setNameError(getFormatError(errors.name));\n  } // surname\n\n\n  if (errors.surname) {\n    signupUIStore.setSurnameError(getFormatError(errors.surname));\n  } // phone\n\n\n  if (errors.phone) {\n    if (errors.phone === ServerErrorType.unique_error) {\n      signupUIStore.setPhoneError(\"Этот номер телефона уже привязан к другому аккаунту\");\n    } else {\n      signupUIStore.setPhoneError(getFormatError(errors.name));\n    }\n  } // email\n\n\n  if (errors.email) {\n    if (errors.email === ServerErrorType.unique_error) {\n      signupUIStore.setEmailError(\"Эта почта уже привязана к другому аккаунту\");\n    } else {\n      signupUIStore.setEmailError(getFormatError(errors.name));\n    }\n  } // password\n\n\n  if (errors.password) {\n    signupUIStore.setPasswordError(getFormatError(errors.password));\n  } // confirm password\n\n\n  if (errors.confirmPassword) {\n    signupUIStore.setConfirmPasswordError(getFormatError(errors.confirmPassword));\n  }\n\n  return false;\n};\n\nconst formatStringPhoneToNumberString = phone => {\n  let withoutPlus = phone.split(\"+\").join(\"\");\n  let withoutSpaces = withoutPlus.split(\" \").join(\"\");\n  let withoutDashes = withoutSpaces.split(\"-\").join(\"\");\n  return withoutDashes;\n};\n\nexport default new AuthStore();","map":{"version":3,"sources":["C:/react/medicine-consultation/client/src/modules/auth/store.ts"],"names":["observable","action","axios","loginUIStore","signupUIStore","tokenServices","AuthStore","constructor","isLogin","console","log","checkAndUpdateToken","then","isRefreshTokenOk","uid","localStorage","getItem","response","fetchUser","user","setError","email","password","isEmailOk","validateEmail","isPasswordOk","validatePassword","post","data","success","id","setItem","saveAccessToken","tokens","access","saveRefreshToken","refresh","goToHomeTrigger","e","setErrorMessage","error","validateUserDataCreation","name","surname","phone","parseInt","formatStringPhoneToNumberString","isMale","needMailing","sex","city","country","consultations","reviews","notificationEmail","sendNotificationToEmail","sendMailingsToEmail","createdAt","Date","lastActiveAt","favourites","photoUrl","process","env","REACT_APP_SERVER_URL","catch","hasInvalidError","validateServerError","errors","setTimeout","accessToken","refreshToken","setShowError","validateDoctorDataCreation","doctor","education","institute","speciality","yearEducation","studyYears","blankSeries","blankNumber","issueDate","workPlaces","passportIssuedByWhom","passportIssueDate","passportSeries","workExperience","isBadgeOpen","redirectToHomeTrigger","raw","get","re","test","String","toLowerCase","length","hasError","trim","setNameError","setSurnameError","setPhoneError","setEmailError","setPasswordError","confirmPassword","setConfirmPasswordError","stage","setInstituteError","setSpecialityError","setStudyYearsError","setBlankSeriesError","setBlankNumberError","setIssueDateError","setPassportIssuedByWhomError","setPassportSeriesError","setPassportIssueDateError","setWorkExperienceError","setWorkPlacesError","getFormatError","type","ServerErrorType","email_format_error","length_error","phone_format_number","required_error","keys","Object","values","invalid_error","includes","unique_error","withoutPlus","split","join","withoutSpaces","withoutDashes"],"mappings":"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","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport axios from \"axios\";\r\n\r\n// Another stores & services\r\nimport loginUIStore from \"./stores/loginUI\";\r\nimport signupUIStore from \"./stores/signupUI\";\r\nimport tokenServices from \"../../services/token-services\";\r\n\r\nclass AuthStore {\r\n    constructor() {\r\n        this.isLogin = tokenServices.isLogin();\r\n\r\n        console.log(`isLogin=${this.isLogin}`);\r\n\r\n        // Tokens\r\n        tokenServices.checkAndUpdateToken().then(async (isRefreshTokenOk) => {\r\n            if (!isRefreshTokenOk) {\r\n                this.isLogin = false;\r\n                return null;\r\n            }\r\n\r\n            if (this.isLogin) {\r\n                this.uid = localStorage.getItem(\"uid\") ?? \"\";\r\n\r\n                if (this.uid !== \"\") {\r\n                    const response = await fetchUser(this.uid);\r\n\r\n                    this.user = response ?? {};\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Observables\r\n    @observable user: UserType = {};\r\n    @observable uid?: string;\r\n    @observable isLogin: boolean = false;\r\n    @observable goToHomeTrigger = false; // Use to trigger reaction inside login/signup component to go to home page\r\n\r\n    // Action\r\n    @action login = async () => {\r\n        // Remove all past errors\r\n        loginUIStore.setError();\r\n\r\n        // Get email & password from ui\r\n        const email = loginUIStore.email;\r\n        const password = loginUIStore.password;\r\n\r\n        // validate\r\n        const isEmailOk = validateEmail(email);\r\n        const isPasswordOk = validatePassword(password);\r\n\r\n        if (!isEmailOk || !isPasswordOk) {\r\n            loginUIStore.setError(\"Неверный email или пароль\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Send data to server\r\n            const response = await axios.post(\r\n                `http://localhost:5000/api/login-user`,\r\n                {\r\n                    email,\r\n                    password,\r\n                }\r\n            );\r\n\r\n            //${process.env.REACT_APP_SERVER_URL}\r\n\r\n            // if !success --> show error\r\n            if (!response.data.success) {\r\n                loginUIStore.setError(\"Неверный email или пароль\");\r\n                return;\r\n            }\r\n\r\n            // Set all data to localstorage & authStore\r\n            this.isLogin = true;\r\n            const id = response.data.id;\r\n            this.uid = id;\r\n            localStorage.setItem(\"uid\", id);\r\n\r\n            // Generate & save new tokens\r\n            tokenServices.saveAccessToken(response.data.tokens.access);\r\n            tokenServices.saveRefreshToken(response.data.tokens.refresh);\r\n\r\n            // Fetch user based on id\r\n            this.user = (await fetchUser(id)) ?? {};\r\n\r\n            // Trigger home trigger to go to home page\r\n            this.goToHomeTrigger = !this.goToHomeTrigger;\r\n        } catch (e) {\r\n            console.log(\"Some error...\");\r\n            console.log(e);\r\n            signupUIStore.setErrorMessage(\r\n                \"Произошла неизвестная ошибка. Попробуйте повторить попытку позднее.\"\r\n            );\r\n        }\r\n    };\r\n\r\n    @action signup = async () => {\r\n        // validate data from ui\r\n        const error: boolean = validateUserDataCreation();\r\n        if (error) return;\r\n\r\n        // get data from ui\r\n        const name = signupUIStore.name;\r\n        const surname = signupUIStore.surname;\r\n        const phone = parseInt(\r\n            formatStringPhoneToNumberString(signupUIStore.phone)\r\n        );\r\n        const email = signupUIStore.email;\r\n        const password = signupUIStore.password;\r\n        const isMale = signupUIStore.isMale;\r\n        const needMailing = signupUIStore.needMailing;\r\n\r\n        // Create user\r\n        const user: UserType = {\r\n            name,\r\n            surname,\r\n            phone,\r\n            email,\r\n            password,\r\n            sex: isMale,\r\n            city: \"\",\r\n            country: \"\",\r\n            consultations: [],\r\n            reviews: [],\r\n            notificationEmail: email,\r\n            sendNotificationToEmail: needMailing,\r\n            sendMailingsToEmail: needMailing,\r\n            createdAt: new Date(),\r\n            lastActiveAt: new Date(),\r\n            favourites: [],\r\n            photoUrl: \"\",\r\n        };\r\n\r\n        try {\r\n            // send user to db\r\n            const response = await axios\r\n                .post(`${process.env.REACT_APP_SERVER_URL}/api/user`, user)\r\n                .catch((e) => {\r\n                    return e.response;\r\n                });\r\n\r\n            // if !success --> show error\r\n            if (!response.data.success) {\r\n                const hasInvalidError: boolean = validateServerError(\r\n                    response.data.errors\r\n                );\r\n                if (hasInvalidError) {\r\n                    signupUIStore.setErrorMessage(\r\n                        \"Произошла непредвиденная ошибка. Повторите попытку позже\"\r\n                    );\r\n\r\n                    setTimeout(() => {\r\n                        signupUIStore.setErrorMessage();\r\n                    }, 5000);\r\n                    return null;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Tokens\r\n            const accessToken = response.data.tokens.access;\r\n            const refreshToken = response.data.tokens.refresh;\r\n\r\n            // save given tokens\r\n            tokenServices.saveAccessToken(accessToken);\r\n            tokenServices.saveRefreshToken(refreshToken);\r\n\r\n            // Save user id\r\n            const id = response.data.user.id;\r\n            localStorage.setItem(\"uid\", id);\r\n\r\n            // Set user\r\n            this.user = user;\r\n\r\n            console.log(`Create user with id ${id}`);\r\n\r\n            // Trigger home trigger to go to home page\r\n            this.goToHomeTrigger = !this.goToHomeTrigger;\r\n        } catch (e) {\r\n            console.error(e);\r\n\r\n            // show error and hide it after 5s\r\n            signupUIStore.setShowError(true);\r\n            signupUIStore.setErrorMessage(\r\n                \"Произошла непредвиденная ошибка. Повторите попытку позже\"\r\n            );\r\n\r\n            setTimeout(() => {\r\n                signupUIStore.setShowError(false);\r\n                setTimeout(() => {\r\n                    signupUIStore.setErrorMessage();\r\n                }, 1000);\r\n            }, 5000);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    @action doctorSignup = async () => {\r\n        try {\r\n            // validate data from ui\r\n            if (validateDoctorDataCreation(3)) return;\r\n\r\n            const doctor: IBecomeDoctor = {\r\n                name: signupUIStore.name,\r\n                surname: signupUIStore.surname,\r\n                phone: formatStringPhoneToNumberString(signupUIStore.phone),\r\n                email: signupUIStore.email,\r\n                sex: signupUIStore.isMale,\r\n                education: signupUIStore.institute,\r\n                speciality: signupUIStore.speciality,\r\n                yearEducation: signupUIStore.studyYears,\r\n                blankSeries: signupUIStore.blankSeries,\r\n                blankNumber: signupUIStore.blankNumber,\r\n                issueDate: signupUIStore.issueDate,\r\n                workPlaces: signupUIStore.workPlaces,\r\n                passportIssuedByWhom: signupUIStore.passportIssuedByWhom,\r\n                passportIssueDate: signupUIStore.passportIssueDate,\r\n                passportSeries: signupUIStore.passportSeries,\r\n                password: signupUIStore.password,\r\n                workExperience: signupUIStore.workExperience,\r\n            };\r\n\r\n            // send doctor to db\r\n            const response = await axios\r\n                .post(\r\n                    `${process.env.REACT_APP_SERVER_URL}/api/doctor-request/send`,\r\n                    doctor\r\n                ) // todo\r\n                .catch((e) => {\r\n                    return e.response;\r\n                });\r\n\r\n            // todo\r\n\r\n            // Show badge\r\n            signupUIStore.isBadgeOpen = true;\r\n            setTimeout(() => {\r\n                signupUIStore.isBadgeOpen = false;\r\n                setTimeout(() => {\r\n                    signupUIStore.redirectToHomeTrigger = !signupUIStore.redirectToHomeTrigger;\r\n                }, 300);\r\n            }, 3300);\r\n        } catch (e) {\r\n            console.error(e);\r\n\r\n            // show error and hide it after 5s\r\n            signupUIStore.setShowError(true);\r\n            signupUIStore.setErrorMessage(\r\n                \"Произошла непредвиденная ошибка. Повторите попытку позже\"\r\n            );\r\n\r\n            setTimeout(() => {\r\n                signupUIStore.setShowError(false);\r\n                setTimeout(() => {\r\n                    signupUIStore.setErrorMessage();\r\n                }, 1250);\r\n            }, 5000);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\n// Functions\r\nconst fetchUser = async (uid: string): Promise<UserType | null> => {\r\n    try {\r\n        const raw = await axios.get(\r\n            `${process.env.REACT_APP_SERVER_URL}/api/user/${uid}`\r\n        );\r\n        return raw.data.user;\r\n    } catch (e) {\r\n        console.log(e);\r\n        return null;\r\n    }\r\n};\r\n\r\nconst validateEmail = (email: string): boolean => {\r\n    const re = /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n};\r\n\r\nconst validatePassword = (password: string): boolean => password.length >= 8;\r\n\r\nconst validateUserDataCreation = (): boolean => {\r\n    signupUIStore.setErrorMessage();\r\n    let hasError = false;\r\n\r\n    // name\r\n    if (signupUIStore.name.trim().length === 0) {\r\n        hasError = true;\r\n        signupUIStore.setNameError(\"Необходимо ввести ваше имя\");\r\n    } else {\r\n        signupUIStore.setNameError();\r\n    }\r\n\r\n    // surname\r\n    if (signupUIStore.surname.trim().length === 0) {\r\n        hasError = true;\r\n        signupUIStore.setSurnameError(\"Необходимо ввести вашу фамилию\");\r\n    } else {\r\n        signupUIStore.setSurnameError();\r\n    }\r\n\r\n    // phone\r\n    if (formatStringPhoneToNumberString(signupUIStore.phone).length !== 11) {\r\n        hasError = true;\r\n        signupUIStore.setPhoneError(\"Телефон введен неверно\");\r\n    } else {\r\n        signupUIStore.setPhoneError();\r\n    }\r\n\r\n    // email\r\n    if (signupUIStore.email.trim().length === 0) {\r\n        hasError = true;\r\n        signupUIStore.setEmailError(\"Необходимо ввести вашу почту\");\r\n    } else {\r\n        signupUIStore.setEmailError();\r\n    }\r\n\r\n    // password\r\n    if (signupUIStore.password.trim().length < 8) {\r\n        hasError = true;\r\n        signupUIStore.setPasswordError(\"Минимальная длина пароля - 8 символов\");\r\n    } else {\r\n        signupUIStore.setPasswordError();\r\n\r\n        // confirm password\r\n        if (signupUIStore.password !== signupUIStore.confirmPassword) {\r\n            hasError = true;\r\n            signupUIStore.setConfirmPasswordError(\"Пароли должны совпадать\");\r\n        } else {\r\n            signupUIStore.setConfirmPasswordError();\r\n        }\r\n    }\r\n\r\n    return hasError;\r\n};\r\n\r\nexport const validateDoctorDataCreation = (stage: number): boolean => {\r\n    // Doctor Model is extends from user model\r\n    signupUIStore.setErrorMessage();\r\n    let hasError = false;\r\n\r\n    if (stage === 1) {\r\n        return validateUserDataCreation();\r\n    } else if (stage === 2) {\r\n        // education\r\n        if (signupUIStore.institute.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setInstituteError(\r\n                \"Необходимо указать ваше образование\"\r\n            );\r\n        } else {\r\n            signupUIStore.setInstituteError();\r\n        }\r\n\r\n        // speciality\r\n        if (signupUIStore.speciality.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setSpecialityError(\r\n                \"Необходимо указать вашу специальность\"\r\n            );\r\n        } else {\r\n            signupUIStore.setSpecialityError();\r\n        }\r\n\r\n        // year education\r\n        if (signupUIStore.studyYears.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setStudyYearsError(\r\n                \"Необходимо указать годы обучения\"\r\n            );\r\n        } else {\r\n            signupUIStore.setStudyYearsError();\r\n        }\r\n\r\n        // blankSeries\r\n        if (signupUIStore.blankSeries.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setBlankSeriesError(\r\n                \"Необходимо указать серию бланка\"\r\n            );\r\n        } else {\r\n            signupUIStore.setBlankSeriesError();\r\n        }\r\n\r\n        // blankSeries\r\n        if (signupUIStore.blankNumber.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setBlankNumberError(\r\n                \"Необходимо указать номер бланка\"\r\n            );\r\n        } else {\r\n            signupUIStore.setBlankNumberError();\r\n        }\r\n\r\n        // issueDate\r\n        if (signupUIStore.issueDate.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setIssueDateError(\"Необходимо указать дату выдачи\");\r\n        } else {\r\n            signupUIStore.setIssueDateError();\r\n        }\r\n    } else if (stage === 3) {\r\n        // passportIssuedByWhom\r\n        if (signupUIStore.passportIssuedByWhom.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setPassportIssuedByWhomError(\r\n                \"Необходимо указать кем был выдан ваш паспорт\"\r\n            );\r\n        } else {\r\n            signupUIStore.setPassportIssuedByWhomError();\r\n        }\r\n\r\n        // passportSeries\r\n        if (signupUIStore.passportSeries.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setPassportSeriesError(\"Необходимо указать серию\");\r\n        } else {\r\n            signupUIStore.setPassportSeriesError();\r\n        }\r\n\r\n        // passportIssueDate\r\n        if (signupUIStore.passportIssueDate.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setPassportIssueDateError(\r\n                \"Необходимо указать дату выдачи\"\r\n            );\r\n        } else {\r\n            signupUIStore.setPassportIssueDateError();\r\n        }\r\n\r\n        // workExperience\r\n        if (signupUIStore.workExperience.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setWorkExperienceError(\"Необходимо указать ваш опыт\");\r\n        } else {\r\n            signupUIStore.setWorkExperienceError();\r\n        }\r\n\r\n        // workPlaces\r\n        if (signupUIStore.workPlaces.trim().length === 0) {\r\n            hasError = true;\r\n            signupUIStore.setWorkPlacesError(\r\n                \"Необходимо указать ваши места работы\"\r\n            );\r\n        } else {\r\n            signupUIStore.setWorkPlacesError();\r\n        }\r\n    }\r\n\r\n    return hasError;\r\n};\r\n\r\nconst validateServerError = (errors: any): boolean => {\r\n    const getFormatError = (type: ServerErrorType) => {\r\n        switch (type) {\r\n            case ServerErrorType.email_format_error:\r\n                return \"Неверный формат\";\r\n            case ServerErrorType.length_error:\r\n                return \"Это поле обязательно\";\r\n            case ServerErrorType.phone_format_number:\r\n                return \"Неверный номер телефона\";\r\n            case ServerErrorType.required_error:\r\n                return \"Это поле обязательно\";\r\n        }\r\n    };\r\n\r\n    console.log(errors);\r\n\r\n    const keys = Object.keys(errors);\r\n\r\n    // check invalid_error\r\n    const values = Object.values(ServerErrorType.invalid_error);\r\n    if (values.includes(ServerErrorType.invalid_error) || keys.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    // name\r\n    if (errors.name) {\r\n        signupUIStore.setNameError(getFormatError(errors.name));\r\n    }\r\n\r\n    // surname\r\n    if (errors.surname) {\r\n        signupUIStore.setSurnameError(getFormatError(errors.surname));\r\n    }\r\n\r\n    // phone\r\n    if (errors.phone) {\r\n        if (errors.phone === ServerErrorType.unique_error) {\r\n            signupUIStore.setPhoneError(\r\n                \"Этот номер телефона уже привязан к другому аккаунту\"\r\n            );\r\n        } else {\r\n            signupUIStore.setPhoneError(getFormatError(errors.name));\r\n        }\r\n    }\r\n\r\n    // email\r\n    if (errors.email) {\r\n        if (errors.email === ServerErrorType.unique_error) {\r\n            signupUIStore.setEmailError(\r\n                \"Эта почта уже привязана к другому аккаунту\"\r\n            );\r\n        } else {\r\n            signupUIStore.setEmailError(getFormatError(errors.name));\r\n        }\r\n    }\r\n\r\n    // password\r\n    if (errors.password) {\r\n        signupUIStore.setPasswordError(getFormatError(errors.password));\r\n    }\r\n\r\n    // confirm password\r\n    if (errors.confirmPassword) {\r\n        signupUIStore.setConfirmPasswordError(\r\n            getFormatError(errors.confirmPassword)\r\n        );\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nconst formatStringPhoneToNumberString = (phone: string): string => {\r\n    let withoutPlus = phone.split(\"+\").join(\"\");\r\n    let withoutSpaces = withoutPlus.split(\" \").join(\"\");\r\n    let withoutDashes = withoutSpaces.split(\"-\").join(\"\");\r\n\r\n    return withoutDashes;\r\n};\r\n\r\nexport default new AuthStore();\r\n"]},"metadata":{},"sourceType":"module"}