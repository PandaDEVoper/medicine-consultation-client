{"ast":null,"code":"import Duration from \"./duration\";\n\nclass Time {\n  constructor(_hour, _minute) {\n    this.hour = void 0;\n    this.minute = void 0;\n\n    this.getDate = () => new Date(1, 0, 1, this.hour, this.minute);\n\n    this.inMinutes = () => this.minute + this.hour * 60;\n\n    this.duration = time => new Duration(Math.abs(time.inMinutes() - this.minute));\n\n    this.add = minutes => {\n      const min = (minutes + this.minute) % 60;\n      const hoursToMin = Math.floor((minutes + this.minute) / 60);\n      return new Time(hoursToMin + this.hour, min);\n    };\n\n    this.biggerOrEqualThan = time => this.inMinutes() >= time.inMinutes();\n\n    this.format = () => {\n      let minute = String(this.minute),\n          hour = String(this.hour);\n      if (minute.length === 1) minute = \"0\" + minute;\n      if (hour.length === 1) hour = \"0\" + hour;\n      return `${hour}:${minute}`;\n    };\n\n    this.hour = _hour > 24 || _hour < 0 ? 0 : _hour;\n    this.minute = _minute > 60 || _minute < 0 ? 0 : _minute;\n  }\n\n}\n\nexport default Time;","map":{"version":3,"sources":["C:/react/medicine-consultation/client/src/utils/time.ts"],"names":["Duration","Time","constructor","hour","minute","getDate","Date","inMinutes","duration","time","Math","abs","add","minutes","min","hoursToMin","floor","biggerOrEqualThan","format","String","length"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,IAAN,CAA4B;AACxBC,EAAAA,WAAW,CAACC,KAAD,EAAeC,OAAf,EAA+B;AAAA,SAK1CD,IAL0C;AAAA,SAM1CC,MAN0C;;AAAA,SAQ1CC,OAR0C,GAQhC,MAAY,IAAIC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,KAAKH,IAAvB,EAA6B,KAAKC,MAAlC,CARoB;;AAAA,SAS1CG,SAT0C,GAS9B,MAAc,KAAKH,MAAL,GAAc,KAAKD,IAAL,GAAY,EATV;;AAAA,SAU1CK,QAV0C,GAU9BC,IAAD,IACP,IAAIT,QAAJ,CAAaU,IAAI,CAACC,GAAL,CAASF,IAAI,CAACF,SAAL,KAAmB,KAAKH,MAAjC,CAAb,CAXsC;;AAAA,SAa1CQ,GAb0C,GAanCC,OAAD,IAA2B;AAC7B,YAAMC,GAAW,GAAG,CAACD,OAAO,GAAG,KAAKT,MAAhB,IAA0B,EAA9C;AACA,YAAMW,UAAkB,GAAGL,IAAI,CAACM,KAAL,CAAW,CAACH,OAAO,GAAG,KAAKT,MAAhB,IAA0B,EAArC,CAA3B;AACA,aAAO,IAAIH,IAAJ,CAASc,UAAU,GAAG,KAAKZ,IAA3B,EAAiCW,GAAjC,CAAP;AACH,KAjByC;;AAAA,SAmB1CG,iBAnB0C,GAmBrBR,IAAD,IAAgB,KAAKF,SAAL,MAAoBE,IAAI,CAACF,SAAL,EAnBd;;AAAA,SAqB1CW,MArB0C,GAqBjC,MAAc;AACnB,UAAId,MAAM,GAAGe,MAAM,CAAC,KAAKf,MAAN,CAAnB;AAAA,UACID,IAAI,GAAGgB,MAAM,CAAC,KAAKhB,IAAN,CADjB;AAGA,UAAIC,MAAM,CAACgB,MAAP,KAAkB,CAAtB,EAAyBhB,MAAM,GAAG,MAAMA,MAAf;AACzB,UAAID,IAAI,CAACiB,MAAL,KAAgB,CAApB,EAAuBjB,IAAI,GAAG,MAAMA,IAAb;AAEvB,aAAQ,GAAEA,IAAK,IAAGC,MAAO,EAAzB;AACH,KA7ByC;;AACtC,SAAKD,IAAL,GAAYA,KAAI,GAAG,EAAP,IAAaA,KAAI,GAAG,CAApB,GAAwB,CAAxB,GAA4BA,KAAxC;AACA,SAAKC,MAAL,GAAcA,OAAM,GAAG,EAAT,IAAeA,OAAM,GAAG,CAAxB,GAA4B,CAA5B,GAAgCA,OAA9C;AACH;;AAJuB;;AA4C5B,eAAeH,IAAf","sourcesContent":["import Duration from \"./duration\";\r\n\r\nclass Time implements ITime {\r\n    constructor(hour: number, minute: number) {\r\n        this.hour = hour > 24 || hour < 0 ? 0 : hour;\r\n        this.minute = minute > 60 || minute < 0 ? 0 : minute;\r\n    }\r\n\r\n    hour: number;\r\n    minute: number;\r\n\r\n    getDate = (): Date => new Date(1, 0, 1, this.hour, this.minute);\r\n    inMinutes = (): number => this.minute + this.hour * 60;\r\n    duration = (time: Time): Duration =>\r\n        new Duration(Math.abs(time.inMinutes() - this.minute));\r\n\r\n    add = (minutes: number): Time => {\r\n        const min: number = (minutes + this.minute) % 60;\r\n        const hoursToMin: number = Math.floor((minutes + this.minute) / 60);\r\n        return new Time(hoursToMin + this.hour, min);\r\n    };\r\n\r\n    biggerOrEqualThan = (time: Time) => this.inMinutes() >= time.inMinutes();\r\n\r\n    format = (): string => {\r\n        let minute = String(this.minute),\r\n            hour = String(this.hour);\r\n\r\n        if (minute.length === 1) minute = \"0\" + minute;\r\n        if (hour.length === 1) hour = \"0\" + hour;\r\n\r\n        return `${hour}:${minute}`;\r\n    };\r\n}\r\n\r\nexport interface ITime {\r\n    hour: number;\r\n    minute: number;\r\n\r\n    getDate: () => Date;\r\n    inMinutes: () => number;\r\n    duration: (date: Time) => Duration;\r\n    add: (minutes: number) => Time;\r\n    format: () => string;\r\n}\r\n\r\nexport default Time;\r\n"]},"metadata":{},"sourceType":"module"}