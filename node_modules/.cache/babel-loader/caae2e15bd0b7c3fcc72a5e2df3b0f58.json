{"ast":null,"code":"class FormatServices {\n  constructor() {\n    this.formatNumericPhone = numeric => {\n      let number = String(numeric);\n      number = number.substring(1);\n      if (number.length !== 10) return \"\";\n      let final = \"\";\n      let last = 0;\n      const schema = \"+7 *** ***-**-**\";\n\n      for (let i = 0; i < schema.length; i++) {\n        if (schema[i] === \"*\") {\n          final += number[last];\n          last += 1;\n        } else {\n          final += schema[i];\n        }\n      }\n\n      return final;\n    };\n\n    this.formatPhone = input => {\n      let schema = \"*** ***-**-**\";\n      const nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; // cut input country code\n      // +7 932 332-73-50 --> 932 332-73-50\n\n      input = input.substring(3); // cut last element in user enter too much\n\n      if (input.length > schema.length) {\n        input = input.substring(0, schema.length);\n      }\n\n      for (let i = 0; i < input.length; i++) {\n        const e = input[i];\n\n        if (schema[i] === \"*\") {\n          if (!nums.includes(parseInt(e))) {\n            // if user on i position enter NaN\n            // but number need to be entered\n            return \"+7 \" + input.substring(0, i);\n          }\n        } else if (schema[i] === \" \") {\n          if (input[i] !== \" \") {\n            // if need \" \" on i => insert\n            input = input.substring(0, i) + \" \" + input.substring(i);\n          }\n        } else if (schema[i] === \"-\") {\n          if (input[i] !== \"-\") {\n            // if need \"-\" on i => insert\n            input = input.substring(0, i) + \"-\" + input.substring(i);\n          }\n        }\n      } // if user started removing and last element\n      // is formatting \" \" or \"-\" -- delete last element\n      // to easily erace phone\n\n\n      const length = input.length;\n\n      if (input[length - 1] === \" \" || input[length - 1] === \"-\") {\n        input = input.substring(0, length - 1);\n      } // 932 332-73-50 --> +7 932 332-73-50\n\n\n      return \"+7 \" + input;\n    };\n\n    this.formatDate = date => {\n      return `${date.getDate()} / ${date.getMonth() + 1} / ${date.getFullYear()}`;\n    };\n\n    this.formatSize = bytes => {\n      if (bytes >= 1e9) return Math.floor(bytes / 1e9) + \" Гб\";\n      if (bytes >= 1000000) return Math.floor(bytes / 1000000) + \" Мб\";\n      if (bytes >= 1000) return Math.floor(bytes / 1000) + \" Кб\";\n      return Math.floor(bytes / 1000) + \" Б\";\n    };\n  }\n\n}\n\nexport default new FormatServices();","map":{"version":3,"sources":["c:/react/medicine-consultation/client/src/services/format-services.ts"],"names":["FormatServices","formatNumericPhone","numeric","number","String","substring","length","final","last","schema","i","formatPhone","input","nums","e","includes","parseInt","formatDate","date","getDate","getMonth","getFullYear","formatSize","bytes","Math","floor"],"mappings":"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","sourcesContent":["class FormatServices {\r\n    formatNumericPhone = (numeric: number): string => {\r\n        let number: string = String(numeric);\r\n        number = number.substring(1);\r\n\r\n        if (number.length !== 10) return \"\";\r\n\r\n        let final = \"\";\r\n        let last = 0;\r\n        const schema = \"+7 *** ***-**-**\";\r\n        for (let i = 0; i < schema.length; i++) {\r\n            if (schema[i] === \"*\") {\r\n                final += number[last];\r\n                last += 1;\r\n            } else {\r\n                final += schema[i];\r\n            }\r\n        }\r\n\r\n        return final;\r\n    };\r\n\r\n    formatPhone = (input: string): string => {\r\n        let schema = \"*** ***-**-**\";\r\n        const nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n        // cut input country code\r\n        // +7 932 332-73-50 --> 932 332-73-50\r\n        input = input.substring(3);\r\n\r\n        // cut last element in user enter too much\r\n        if (input.length > schema.length) {\r\n            input = input.substring(0, schema.length);\r\n        }\r\n\r\n        for (let i = 0; i < input.length; i++) {\r\n            const e = input[i];\r\n\r\n            if (schema[i] === \"*\") {\r\n                if (!nums.includes(parseInt(e))) {\r\n                    // if user on i position enter NaN\r\n                    // but number need to be entered\r\n                    return \"+7 \" + input.substring(0, i);\r\n                }\r\n            } else if (schema[i] === \" \") {\r\n                if (input[i] !== \" \") {\r\n                    // if need \" \" on i => insert\r\n                    input = input.substring(0, i) + \" \" + input.substring(i);\r\n                }\r\n            } else if (schema[i] === \"-\") {\r\n                if (input[i] !== \"-\") {\r\n                    // if need \"-\" on i => insert\r\n                    input = input.substring(0, i) + \"-\" + input.substring(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        // if user started removing and last element\r\n        // is formatting \" \" or \"-\" -- delete last element\r\n        // to easily erace phone\r\n        const length = input.length;\r\n        if (input[length - 1] === \" \" || input[length - 1] === \"-\") {\r\n            input = input.substring(0, length - 1);\r\n        }\r\n\r\n        // 932 332-73-50 --> +7 932 332-73-50\r\n        return \"+7 \" + input;\r\n    };\r\n\r\n    formatDate = (date: Date): string => {\r\n        return `${date.getDate()} / ${\r\n            date.getMonth() + 1\r\n        } / ${date.getFullYear()}`;\r\n    };\r\n\r\n    formatSize = (bytes: number): string => {\r\n        if (bytes >= 1e9) return Math.floor(bytes / 1e9) + \" Гб\";\r\n        if (bytes >= 1000000) return Math.floor(bytes / 1000000) + \" Мб\";\r\n        if (bytes >= 1000) return Math.floor(bytes / 1000) + \" Кб\";\r\n        return Math.floor(bytes / 1000) + \" Б\";\r\n    };\r\n}\r\n\r\nexport default new FormatServices();\r\n"]},"metadata":{},"sourceType":"module"}