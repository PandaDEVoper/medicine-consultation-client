{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;\n\nimport { observable, action } from \"mobx\";\nimport axios from \"axios\";\nimport { requests } from \"../../translation\";\nexport const checkAuth = async next => {\n  const {\n    isOk\n  } = await axios.get(process.env.REACT_APP_SERVER_URL + \"/api/admin/token/check-access\", {\n    params: {\n      token: localStorage.getItem(\"adminAccessToken\")\n    }\n  }).then(data => data.data).catch(e => e.response);\n\n  if (!isOk) {\n    console.log(\"Invalid admin token were provide. Prohibiting the operation\");\n    adminServices.logout();\n    return;\n  }\n\n  const {\n    expired\n  } = await axios.get(process.env.REACT_APP_SERVER_URL + \"/api/admin/token/is-expired\", {\n    params: {\n      token: localStorage.getItem(\"adminAccessToken\")\n    }\n  }).then(data => data.data).catch(e => e.response);\n\n  if (expired) {\n    console.log(\"Admin token is experied. Trying to update.\");\n    const {\n      success,\n      tokens\n    } = await axios.post(process.env.REACT_APP_SERVER_URL + \"/api/admin/token/update-tokens\", {\n      adminid: localStorage.get(\"adminid\"),\n      accessToken: localStorage.getItem(\"adminAccessToken\"),\n      refreshToken: localStorage.getItem(\"adminRefreshToken\")\n    }).then(data => data.data).catch(e => e.response);\n\n    if (!success) {\n      console.log(\"Error while updating tokens\");\n      adminServices.logout();\n    }\n\n    localStorage.setItem(\"adminAccessToken\", tokens.access);\n    localStorage.setItem(\"adminRefreshToken\", tokens.refresh);\n  }\n\n  next();\n};\nlet AdminServices = (_class = (_temp = class AdminServices {\n  constructor() {\n    _initializerDefineProperty(this, \"username\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"uid\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"redirectTo\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"accessToken\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"refreshToken\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"error\", _descriptor6, this);\n\n    this.isLogin = () => {\n      if (this.uid) {\n        return [12, 24].includes(this.uid.length);\n      }\n\n      const uid = localStorage.getItem(\"adminid\");\n      if (!uid) return false;\n      return true;\n    };\n\n    this.saveUser = () => {};\n\n    _initializerDefineProperty(this, \"login\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"logout\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"checkAdminId\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"goToAdminTrigger\", _descriptor10, this);\n\n    this.redirect = route => this.redirectTo = route;\n\n    const setup = action(() => {\n      const isLogin = this.isLogin();\n\n      if (isLogin) {\n        var _localStorage$getItem, _localStorage$getItem2;\n\n        this.accessToken = (_localStorage$getItem = localStorage.getItem(\"adminAccessToken\")) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"\";\n        this.refreshToken = (_localStorage$getItem2 = localStorage.getItem(\"adminRefreshToken\")) !== null && _localStorage$getItem2 !== void 0 ? _localStorage$getItem2 : \"\";\n      }\n    });\n    setup();\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"username\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"zotovY\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"uid\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"redirectTo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"/admin/login\";\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"accessToken\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"refreshToken\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"error\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"login\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (username, password) => {\n      this.error = \"\";\n      const response = await axios.post(process.env.REACT_APP_SERVER_URL + \"/api/admin/login\", {\n        username,\n        password\n      }).then(data => data.data).catch(e => e.response.data);\n\n      if (!response.success) {\n        this.error = requests.loginError;\n        console.log(this.error);\n        return;\n      }\n\n      if (response.success) {\n        this.uid = response.uid;\n        localStorage.setItem(\"adminid\", response.admin.id);\n        localStorage.setItem(\"adminAccessToken\", response.tokens.access);\n        localStorage.setItem(\"adminRefreshToken\", response.tokens.refresh);\n        this.goToAdminTrigger = !this.goToAdminTrigger;\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      localStorage.removeItem(\"adminid\");\n      localStorage.removeItem(\"adminAccessToken\");\n      localStorage.removeItem(\"adminRefreshToken\");\n      this.accessToken = \"\";\n      this.refreshToken = \"\";\n      this.username = \"\";\n      this.redirectTo = \"/admin-login\";\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"checkAdminId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const token = localStorage.getItem(\"adminAccessToken\");\n      const id = localStorage.getItem(\"adminid\");\n      const response = await axios.get(process.env.REACT_APP_SERVER_URL + \"/api/admin/token/check-access\", {\n        params: {\n          token,\n          id\n        }\n      }).then(data => data.data).catch(e => e.response.data);\n      console.log(response);\n      return response.isOk;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"goToAdminTrigger\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n})), _class);\nconst adminServices = new AdminServices();\nexport default adminServices;","map":{"version":3,"sources":["C:/react/medicine-consultation/client/src/modules/admin/store.ts"],"names":["observable","action","axios","requests","checkAuth","next","isOk","get","process","env","REACT_APP_SERVER_URL","params","token","localStorage","getItem","then","data","catch","e","response","console","log","adminServices","logout","expired","success","tokens","post","adminid","accessToken","refreshToken","setItem","access","refresh","AdminServices","constructor","isLogin","uid","includes","length","saveUser","redirect","route","redirectTo","setup","username","password","error","loginError","admin","id","goToAdminTrigger","removeItem"],"mappings":"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","sourcesContent":["import { observable, action } from \"mobx\";\r\nimport axios from \"axios\";\r\nimport { requests } from \"../../translation\";\r\nimport requestStore from \"./modules/Requests/store\";\r\n\r\nexport const checkAuth = async (next: Function) => {\r\n    const { isOk } = await axios\r\n        .get(\r\n            process.env.REACT_APP_SERVER_URL + \"/api/admin/token/check-access\",\r\n            { params: { token: localStorage.getItem(\"adminAccessToken\") } }\r\n        )\r\n        .then((data) => data.data)\r\n        .catch((e) => e.response);\r\n\r\n    if (!isOk) {\r\n        console.log(\r\n            \"Invalid admin token were provide. Prohibiting the operation\"\r\n        );\r\n        adminServices.logout();\r\n        return;\r\n    }\r\n\r\n    const { expired } = await axios\r\n        .get(process.env.REACT_APP_SERVER_URL + \"/api/admin/token/is-expired\", {\r\n            params: { token: localStorage.getItem(\"adminAccessToken\") },\r\n        })\r\n        .then((data) => data.data)\r\n        .catch((e) => e.response);\r\n\r\n    if (expired) {\r\n        console.log(\"Admin token is experied. Trying to update.\");\r\n        const { success, tokens } = await axios\r\n            .post(\r\n                process.env.REACT_APP_SERVER_URL +\r\n                    \"/api/admin/token/update-tokens\",\r\n                {\r\n                    adminid: localStorage.get(\"adminid\"),\r\n                    accessToken: localStorage.getItem(\"adminAccessToken\"),\r\n                    refreshToken: localStorage.getItem(\"adminRefreshToken\"),\r\n                }\r\n            )\r\n            .then((data) => data.data)\r\n            .catch((e) => e.response);\r\n\r\n        if (!success) {\r\n            console.log(\"Error while updating tokens\");\r\n            adminServices.logout();\r\n        }\r\n\r\n        localStorage.setItem(\"adminAccessToken\", tokens.access);\r\n        localStorage.setItem(\"adminRefreshToken\", tokens.refresh);\r\n    }\r\n\r\n    next();\r\n};\r\n\r\nclass AdminServices {\r\n    constructor() {\r\n        const setup = action(() => {\r\n            const isLogin: boolean = this.isLogin();\r\n\r\n            if (isLogin) {\r\n                this.accessToken =\r\n                    localStorage.getItem(\"adminAccessToken\") ?? \"\";\r\n                this.refreshToken =\r\n                    localStorage.getItem(\"adminRefreshToken\") ?? \"\";\r\n            }\r\n        });\r\n        setup();\r\n    }\r\n\r\n    @observable username: string = \"zotovY\";\r\n    @observable uid: string = \"\";\r\n    @observable redirectTo: string = \"/admin/login\";\r\n    @observable accessToken: string = \"\";\r\n    @observable refreshToken: string = \"\";\r\n    @observable error?: string = \"\";\r\n\r\n    isLogin = (): boolean => {\r\n        if (this.uid) {\r\n            return [12, 24].includes(this.uid.length);\r\n        }\r\n\r\n        const uid = localStorage.getItem(\"adminid\");\r\n\r\n        if (!uid) return false;\r\n\r\n        return true;\r\n    };\r\n\r\n    saveUser = () => {};\r\n\r\n    @action login = async (username: string, password: string) => {\r\n        this.error = \"\";\r\n\r\n        const response = await axios\r\n            .post(process.env.REACT_APP_SERVER_URL + \"/api/admin/login\", {\r\n                username,\r\n                password,\r\n            })\r\n            .then((data) => data.data)\r\n            .catch((e) => e.response.data);\r\n\r\n        if (!response.success) {\r\n            this.error = requests.loginError;\r\n            console.log(this.error);\r\n            return;\r\n        }\r\n\r\n        if (response.success) {\r\n            this.uid = response.uid;\r\n            localStorage.setItem(\"adminid\", response.admin.id);\r\n            localStorage.setItem(\"adminAccessToken\", response.tokens.access);\r\n            localStorage.setItem(\"adminRefreshToken\", response.tokens.refresh);\r\n            this.goToAdminTrigger = !this.goToAdminTrigger;\r\n        }\r\n    };\r\n\r\n    @action logout = () => {\r\n        localStorage.removeItem(\"adminid\");\r\n        localStorage.removeItem(\"adminAccessToken\");\r\n        localStorage.removeItem(\"adminRefreshToken\");\r\n        this.accessToken = \"\";\r\n        this.refreshToken = \"\";\r\n        this.username = \"\";\r\n        this.redirectTo = \"/admin-login\";\r\n    };\r\n\r\n    @action checkAdminId = async () => {\r\n        const token = localStorage.getItem(\"adminAccessToken\");\r\n        const id = localStorage.getItem(\"adminid\");\r\n\r\n        const response = await axios\r\n            .get(\r\n                process.env.REACT_APP_SERVER_URL +\r\n                    \"/api/admin/token/check-access\",\r\n                {\r\n                    params: {\r\n                        token,\r\n                        id,\r\n                    },\r\n                }\r\n            )\r\n            .then((data) => data.data)\r\n            .catch((e) => e.response.data);\r\n\r\n        console.log(response);\r\n        return response.isOk;\r\n    };\r\n\r\n    @observable goToAdminTrigger: boolean = false;\r\n\r\n    redirect = (route: string) => (this.redirectTo = route);\r\n}\r\n\r\nconst adminServices = new AdminServices();\r\n\r\nexport default adminServices;\r\n"]},"metadata":{},"sourceType":"module"}