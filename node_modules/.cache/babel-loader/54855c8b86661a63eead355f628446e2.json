{"ast":null,"code":"import _initializerDefineProperty from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"c:\\\\react\\\\medicine-consultation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { observable } from \"mobx\";\nimport axios from \"axios\";\nimport { checkPassword } from \"../helper\";\nlet ResetPasswordFromEmailСontroller = (_class = (_temp = class ResetPasswordFromEmailСontroller {\n  constructor() {\n    _initializerDefineProperty(this, \"email\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"emailError\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"password1\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"password2\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"passwordError\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"successOperation\", _descriptor6, this);\n\n    this.validateEmail = () => {\n      const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(this.email.toLowerCase());\n    };\n\n    this.sendResetPasswordEmail = async () => {\n      this.emailError = \"\";\n      const ok = this.validateEmail();\n\n      if (!ok) {\n        this.emailError = \"Неверно форматирован email\";\n        return;\n      }\n\n      const response = await axios.post(process.env.REACT_APP_SERVER_URL + \"/api/send-reset-password-email\", {\n        email: this.email\n      }).then(data => data === null || data === void 0 ? void 0 : data.data).catch(e => {\n        var _e$response;\n\n        return (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data;\n      });\n\n      if (!response) {\n        this.emailError = \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\n        return;\n      }\n\n      if (!response.success) {\n        if (response.error === \"no_user_found\") {\n          this.emailError = \"Пользователь с таким email не найден:(\";\n        } else {\n          this.emailError = \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\n        }\n\n        return;\n      }\n\n      this.successOperation = true;\n    };\n\n    this.sendResetPasswordRequest = async id => {\n      this.passwordError = \"\";\n      const {\n        ok,\n        error\n      } = checkPassword(this.password1, this.password2);\n\n      if (!ok) {\n        this.passwordError = error;\n        return;\n      }\n\n      const response = await axios.post(process.env.REACT_APP_SERVER_URL + \"/api/reset-password\", {\n        requestId: id,\n        password: this.password1\n      }).then(data => data === null || data === void 0 ? void 0 : data.data).catch(e => {\n        var _e$response2;\n\n        return (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.data;\n      });\n\n      if (!response) {\n        this.passwordError = \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\n        return;\n      }\n\n      if (!response.success) {\n        if (response.error === \"expired_error\") {\n          this.passwordError = \"Срок действия запрос истек. Запросите новый для смены пароля\";\n        } else if (response.error === \"invalid_password\") {\n          this.passwordError = \"Пароль должен быть от 8 символов в длину, содержать числа и буквы латинского алфавита\";\n        } else {\n          this.passwordError = \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\n        }\n\n        return;\n      }\n\n      this.successOperation = true;\n      setTimeout(() => this.successOperation = false, 5000);\n    };\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"email\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"emailError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return undefined;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"password1\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"password2\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"\";\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"passwordError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return undefined;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"successOperation\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n})), _class);\nexport default new ResetPasswordFromEmailСontroller();","map":{"version":3,"sources":["c:/react/medicine-consultation/client/src/modules/auth/stores/reset-password.ts"],"names":["observable","axios","checkPassword","ResetPasswordFromEmailСontroller","validateEmail","re","test","email","toLowerCase","sendResetPasswordEmail","emailError","ok","response","post","process","env","REACT_APP_SERVER_URL","then","data","catch","e","success","error","successOperation","sendResetPasswordRequest","id","passwordError","password1","password2","requestId","password","setTimeout","undefined"],"mappings":"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","sourcesContent":["import { observable } from \"mobx\";\r\nimport axios from \"axios\";\r\nimport { checkPassword } from \"../helper\";\r\n\r\nclass ResetPasswordFromEmailСontroller {\r\n    @observable email: string = \"\";\r\n    @observable emailError: string | undefined = undefined;\r\n    @observable password1: string = \"\";\r\n    @observable password2: string = \"\";\r\n    @observable passwordError: string | undefined = undefined;\r\n    @observable successOperation: boolean = false;\r\n\r\n    private validateEmail = (): boolean => {\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(this.email.toLowerCase());\r\n    };\r\n\r\n    sendResetPasswordEmail = async (): Promise<void> => {\r\n        this.emailError = \"\";\r\n\r\n        const ok = this.validateEmail();\r\n\r\n        if (!ok) {\r\n            this.emailError = \"Неверно форматирован email\";\r\n            return;\r\n        }\r\n\r\n        const response = await axios\r\n            .post(\r\n                process.env.REACT_APP_SERVER_URL +\r\n                    \"/api/send-reset-password-email\",\r\n                { email: this.email }\r\n            )\r\n            .then((data) => data?.data)\r\n            .catch((e) => e.response?.data);\r\n\r\n        if (!response) {\r\n            this.emailError =\r\n                \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\r\n            return;\r\n        }\r\n\r\n        if (!response.success) {\r\n            if (response.error === \"no_user_found\") {\r\n                this.emailError = \"Пользователь с таким email не найден:(\";\r\n            } else {\r\n                this.emailError =\r\n                    \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.successOperation = true;\r\n    };\r\n\r\n    sendResetPasswordRequest = async (id: string): Promise<void> => {\r\n        this.passwordError = \"\";\r\n\r\n        const { ok, error } = checkPassword(this.password1, this.password2);\r\n\r\n        if (!ok) {\r\n            this.passwordError = error;\r\n            return;\r\n        }\r\n\r\n        const response = await axios\r\n            .post(process.env.REACT_APP_SERVER_URL + \"/api/reset-password\", {\r\n                requestId: id,\r\n                password: this.password1,\r\n            })\r\n            .then((data) => data?.data)\r\n            .catch((e) => e.response?.data);\r\n\r\n        if (!response) {\r\n            this.passwordError =\r\n                \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\r\n            return;\r\n        }\r\n\r\n        if (!response.success) {\r\n            if (response.error === \"expired_error\") {\r\n                this.passwordError =\r\n                    \"Срок действия запрос истек. Запросите новый для смены пароля\";\r\n            } else if (response.error === \"invalid_password\") {\r\n                this.passwordError =\r\n                    \"Пароль должен быть от 8 символов в длину, содержать числа и буквы латинского алфавита\";\r\n            } else {\r\n                this.passwordError =\r\n                    \"Произошла не придвиденная ошибка. Попробуйте повторить позже.\";\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.successOperation = true;\r\n        setTimeout(() => (this.successOperation = false), 5000);\r\n    };\r\n}\r\n\r\nexport default new ResetPasswordFromEmailСontroller();\r\n"]},"metadata":{},"sourceType":"module"}